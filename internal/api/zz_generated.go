// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
	"github.com/massdriver-cloud/mass/internal/api/scalars"
)

type Credential struct {
	ArtifactDefinitionType string `json:"artifactDefinitionType"`
	ArtifactId             string `json:"artifactId"`
}

// GetArtifactDefinitionType returns Credential.ArtifactDefinitionType, and is useful for accessing the field via an interface.
func (v *Credential) GetArtifactDefinitionType() string { return v.ArtifactDefinitionType }

// GetArtifactId returns Credential.ArtifactId, and is useful for accessing the field via an interface.
func (v *Credential) GetArtifactId() string { return v.ArtifactId }

// MutationValidationError includes the requested fields of the GraphQL type ValidationMessage.
// The GraphQL type's documentation follows.
//
// Validation messages are returned when mutation input does not meet the requirements.
// While client-side validation is highly recommended to provide the best User Experience,
// All inputs will always be validated server-side.
//
// Some examples of validations are:
//
// * Username must be at least 10 characters
// * Email field does not contain an email address
// * Birth Date is required
//
// While GraphQL has support for required values, mutation data fields are always
// set to optional in our API. This allows 'required field' messages
// to be returned in the same manner as other validations. The only exceptions
// are id fields, which may be required to perform updates or deletes.
type MutationValidationError struct {
	// A friendly error message, appropriate for display to the end user.
	//
	// The message is interpolated to include the appropriate variables.
	//
	// Example: `Username must be at least 10 characters`
	//
	// This message may change without notice, so we do not recommend you match against the text.
	// Instead, use the *code* field for matching.
	Message string `json:"message"`
}

// GetMessage returns MutationValidationError.Message, and is useful for accessing the field via an interface.
func (v *MutationValidationError) GetMessage() string { return v.Message }

type PreviewEnvironmentInput struct {
	Credentials []Credential `json:"credentials"`
	// GitHub Action event payload.
	CiContext     map[string]interface{} `json:"-"`
	PackageParams map[string]interface{} `json:"-"`
}

// GetCredentials returns PreviewEnvironmentInput.Credentials, and is useful for accessing the field via an interface.
func (v *PreviewEnvironmentInput) GetCredentials() []Credential { return v.Credentials }

// GetCiContext returns PreviewEnvironmentInput.CiContext, and is useful for accessing the field via an interface.
func (v *PreviewEnvironmentInput) GetCiContext() map[string]interface{} { return v.CiContext }

// GetPackageParams returns PreviewEnvironmentInput.PackageParams, and is useful for accessing the field via an interface.
func (v *PreviewEnvironmentInput) GetPackageParams() map[string]interface{} { return v.PackageParams }

func (v *PreviewEnvironmentInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PreviewEnvironmentInput
		CiContext     json.RawMessage `json:"ciContext"`
		PackageParams json.RawMessage `json:"packageParams"`
		graphql.NoUnmarshalJSON
	}
	firstPass.PreviewEnvironmentInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CiContext
		src := firstPass.CiContext
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal PreviewEnvironmentInput.CiContext: %w", err)
			}
		}
	}

	{
		dst := &v.PackageParams
		src := firstPass.PackageParams
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal PreviewEnvironmentInput.PackageParams: %w", err)
			}
		}
	}
	return nil
}

type __premarshalPreviewEnvironmentInput struct {
	Credentials []Credential `json:"credentials"`

	CiContext json.RawMessage `json:"ciContext"`

	PackageParams json.RawMessage `json:"packageParams"`
}

func (v *PreviewEnvironmentInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PreviewEnvironmentInput) __premarshalJSON() (*__premarshalPreviewEnvironmentInput, error) {
	var retval __premarshalPreviewEnvironmentInput

	retval.Credentials = v.Credentials
	{

		dst := &retval.CiContext
		src := v.CiContext
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal PreviewEnvironmentInput.CiContext: %w", err)
		}
	}
	{

		dst := &retval.PackageParams
		src := v.PackageParams
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal PreviewEnvironmentInput.PackageParams: %w", err)
		}
	}
	return &retval, nil
}

// __configurePackageInput is used internally by genqlient
type __configurePackageInput struct {
	OrganizationId string                 `json:"organizationId"`
	TargetId       string                 `json:"targetId"`
	ManifestId     string                 `json:"manifestId"`
	Params         map[string]interface{} `json:"-"`
}

// GetOrganizationId returns __configurePackageInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__configurePackageInput) GetOrganizationId() string { return v.OrganizationId }

// GetTargetId returns __configurePackageInput.TargetId, and is useful for accessing the field via an interface.
func (v *__configurePackageInput) GetTargetId() string { return v.TargetId }

// GetManifestId returns __configurePackageInput.ManifestId, and is useful for accessing the field via an interface.
func (v *__configurePackageInput) GetManifestId() string { return v.ManifestId }

// GetParams returns __configurePackageInput.Params, and is useful for accessing the field via an interface.
func (v *__configurePackageInput) GetParams() map[string]interface{} { return v.Params }

func (v *__configurePackageInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__configurePackageInput
		Params json.RawMessage `json:"params"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__configurePackageInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Params
		src := firstPass.Params
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal __configurePackageInput.Params: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__configurePackageInput struct {
	OrganizationId string `json:"organizationId"`

	TargetId string `json:"targetId"`

	ManifestId string `json:"manifestId"`

	Params json.RawMessage `json:"params"`
}

func (v *__configurePackageInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__configurePackageInput) __premarshalJSON() (*__premarshal__configurePackageInput, error) {
	var retval __premarshal__configurePackageInput

	retval.OrganizationId = v.OrganizationId
	retval.TargetId = v.TargetId
	retval.ManifestId = v.ManifestId
	{

		dst := &retval.Params
		src := v.Params
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal __configurePackageInput.Params: %w", err)
		}
	}
	return &retval, nil
}

// __decommissionPreviewEnvironmentInput is used internally by genqlient
type __decommissionPreviewEnvironmentInput struct {
	OrgId    string `json:"orgId"`
	TargetId string `json:"targetId"`
}

// GetOrgId returns __decommissionPreviewEnvironmentInput.OrgId, and is useful for accessing the field via an interface.
func (v *__decommissionPreviewEnvironmentInput) GetOrgId() string { return v.OrgId }

// GetTargetId returns __decommissionPreviewEnvironmentInput.TargetId, and is useful for accessing the field via an interface.
func (v *__decommissionPreviewEnvironmentInput) GetTargetId() string { return v.TargetId }

// __deployPackageInput is used internally by genqlient
type __deployPackageInput struct {
	OrganizationId string `json:"organizationId"`
	TargetId       string `json:"targetId"`
	ManifestId     string `json:"manifestId"`
}

// GetOrganizationId returns __deployPackageInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__deployPackageInput) GetOrganizationId() string { return v.OrganizationId }

// GetTargetId returns __deployPackageInput.TargetId, and is useful for accessing the field via an interface.
func (v *__deployPackageInput) GetTargetId() string { return v.TargetId }

// GetManifestId returns __deployPackageInput.ManifestId, and is useful for accessing the field via an interface.
func (v *__deployPackageInput) GetManifestId() string { return v.ManifestId }

// __deployPreviewEnvironmentInput is used internally by genqlient
type __deployPreviewEnvironmentInput struct {
	OrganizationId string                  `json:"organizationId"`
	ProjectId      string                  `json:"projectId"`
	Input          PreviewEnvironmentInput `json:"input"`
}

// GetOrganizationId returns __deployPreviewEnvironmentInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__deployPreviewEnvironmentInput) GetOrganizationId() string { return v.OrganizationId }

// GetProjectId returns __deployPreviewEnvironmentInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__deployPreviewEnvironmentInput) GetProjectId() string { return v.ProjectId }

// GetInput returns __deployPreviewEnvironmentInput.Input, and is useful for accessing the field via an interface.
func (v *__deployPreviewEnvironmentInput) GetInput() PreviewEnvironmentInput { return v.Input }

// __getArtifactsByTypeInput is used internally by genqlient
type __getArtifactsByTypeInput struct {
	OrganizationId string `json:"organizationId"`
	ArtifactType   string `json:"artifactType"`
}

// GetOrganizationId returns __getArtifactsByTypeInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getArtifactsByTypeInput) GetOrganizationId() string { return v.OrganizationId }

// GetArtifactType returns __getArtifactsByTypeInput.ArtifactType, and is useful for accessing the field via an interface.
func (v *__getArtifactsByTypeInput) GetArtifactType() string { return v.ArtifactType }

// __getDeploymentByIdInput is used internally by genqlient
type __getDeploymentByIdInput struct {
	OrganizationId string `json:"organizationId"`
	Id             string `json:"id"`
}

// GetOrganizationId returns __getDeploymentByIdInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getDeploymentByIdInput) GetOrganizationId() string { return v.OrganizationId }

// GetId returns __getDeploymentByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__getDeploymentByIdInput) GetId() string { return v.Id }

// __getPackageByNamingConventionInput is used internally by genqlient
type __getPackageByNamingConventionInput struct {
	OrganizationId string `json:"organizationId"`
	Name           string `json:"name"`
}

// GetOrganizationId returns __getPackageByNamingConventionInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getPackageByNamingConventionInput) GetOrganizationId() string { return v.OrganizationId }

// GetName returns __getPackageByNamingConventionInput.Name, and is useful for accessing the field via an interface.
func (v *__getPackageByNamingConventionInput) GetName() string { return v.Name }

// __getProjectByIdInput is used internally by genqlient
type __getProjectByIdInput struct {
	OrganizationId string `json:"organizationId"`
	Id             string `json:"id"`
}

// GetOrganizationId returns __getProjectByIdInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getProjectByIdInput) GetOrganizationId() string { return v.OrganizationId }

// GetId returns __getProjectByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__getProjectByIdInput) GetId() string { return v.Id }

// configurePackageConfigurePackagePackagePayload includes the requested fields of the GraphQL type PackagePayload.
type configurePackageConfigurePackagePackagePayload struct {
	// The object created/updated/deleted by the mutation. May be null if mutation failed.
	Result configurePackageConfigurePackagePackagePayloadResultPackage `json:"result"`
	// Indicates if the mutation completed successfully or not.
	Successful bool `json:"successful"`
	// A list of failed validations. May be blank or null if mutation succeeded.
	Messages []MutationValidationError `json:"messages"`
}

// GetResult returns configurePackageConfigurePackagePackagePayload.Result, and is useful for accessing the field via an interface.
func (v *configurePackageConfigurePackagePackagePayload) GetResult() configurePackageConfigurePackagePackagePayloadResultPackage {
	return v.Result
}

// GetSuccessful returns configurePackageConfigurePackagePackagePayload.Successful, and is useful for accessing the field via an interface.
func (v *configurePackageConfigurePackagePackagePayload) GetSuccessful() bool { return v.Successful }

// GetMessages returns configurePackageConfigurePackagePackagePayload.Messages, and is useful for accessing the field via an interface.
func (v *configurePackageConfigurePackagePackagePayload) GetMessages() []MutationValidationError {
	return v.Messages
}

// configurePackageConfigurePackagePackagePayloadResultPackage includes the requested fields of the GraphQL type Package.
type configurePackageConfigurePackagePackagePayloadResultPackage struct {
	Id string `json:"id"`
	// Package configuration parameters
	Params map[string]interface{} `json:"-"`
}

// GetId returns configurePackageConfigurePackagePackagePayloadResultPackage.Id, and is useful for accessing the field via an interface.
func (v *configurePackageConfigurePackagePackagePayloadResultPackage) GetId() string { return v.Id }

// GetParams returns configurePackageConfigurePackagePackagePayloadResultPackage.Params, and is useful for accessing the field via an interface.
func (v *configurePackageConfigurePackagePackagePayloadResultPackage) GetParams() map[string]interface{} {
	return v.Params
}

func (v *configurePackageConfigurePackagePackagePayloadResultPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*configurePackageConfigurePackagePackagePayloadResultPackage
		Params json.RawMessage `json:"params"`
		graphql.NoUnmarshalJSON
	}
	firstPass.configurePackageConfigurePackagePackagePayloadResultPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Params
		src := firstPass.Params
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal configurePackageConfigurePackagePackagePayloadResultPackage.Params: %w", err)
			}
		}
	}
	return nil
}

type __premarshalconfigurePackageConfigurePackagePackagePayloadResultPackage struct {
	Id string `json:"id"`

	Params json.RawMessage `json:"params"`
}

func (v *configurePackageConfigurePackagePackagePayloadResultPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *configurePackageConfigurePackagePackagePayloadResultPackage) __premarshalJSON() (*__premarshalconfigurePackageConfigurePackagePackagePayloadResultPackage, error) {
	var retval __premarshalconfigurePackageConfigurePackagePackagePayloadResultPackage

	retval.Id = v.Id
	{

		dst := &retval.Params
		src := v.Params
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal configurePackageConfigurePackagePackagePayloadResultPackage.Params: %w", err)
		}
	}
	return &retval, nil
}

// configurePackageResponse is returned by configurePackage on success.
type configurePackageResponse struct {
	// Update a Package's parameters
	ConfigurePackage configurePackageConfigurePackagePackagePayload `json:"configurePackage"`
}

// GetConfigurePackage returns configurePackageResponse.ConfigurePackage, and is useful for accessing the field via an interface.
func (v *configurePackageResponse) GetConfigurePackage() configurePackageConfigurePackagePackagePayload {
	return v.ConfigurePackage
}

// decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayload includes the requested fields of the GraphQL type TargetPayload.
type decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayload struct {
	// The object created/updated/deleted by the mutation. May be null if mutation failed.
	Result decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTarget `json:"result"`
	// Indicates if the mutation completed successfully or not.
	Successful bool `json:"successful"`
	// A list of failed validations. May be blank or null if mutation succeeded.
	Messages []MutationValidationError `json:"messages"`
}

// GetResult returns decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayload.Result, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayload) GetResult() decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTarget {
	return v.Result
}

// GetSuccessful returns decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayload.Successful, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayload) GetSuccessful() bool {
	return v.Successful
}

// GetMessages returns decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayload.Messages, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayload) GetMessages() []MutationValidationError {
	return v.Messages
}

// decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTarget includes the requested fields of the GraphQL type Target.
type decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTarget struct {
	Id      string                                                                                       `json:"id"`
	Slug    string                                                                                       `json:"slug"`
	Project decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTargetProject `json:"project"`
}

// GetId returns decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTarget.Id, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTarget) GetId() string {
	return v.Id
}

// GetSlug returns decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTarget.Slug, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTarget) GetSlug() string {
	return v.Slug
}

// GetProject returns decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTarget.Project, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTarget) GetProject() decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTargetProject {
	return v.Project
}

// decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTargetProject includes the requested fields of the GraphQL type Project.
type decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTargetProject struct {
	Id   string `json:"id"`
	Slug string `json:"slug"`
}

// GetId returns decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTargetProject.Id, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTargetProject) GetId() string {
	return v.Id
}

// GetSlug returns decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTargetProject.Slug, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayloadResultTargetProject) GetSlug() string {
	return v.Slug
}

// decommissionPreviewEnvironmentResponse is returned by decommissionPreviewEnvironment on success.
type decommissionPreviewEnvironmentResponse struct {
	DecommissionPreviewEnvironment decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayload `json:"decommissionPreviewEnvironment"`
}

// GetDecommissionPreviewEnvironment returns decommissionPreviewEnvironmentResponse.DecommissionPreviewEnvironment, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentResponse) GetDecommissionPreviewEnvironment() decommissionPreviewEnvironmentDecommissionPreviewEnvironmentTargetPayload {
	return v.DecommissionPreviewEnvironment
}

// deployPackageDeployPackageDeploymentPayload includes the requested fields of the GraphQL type DeploymentPayload.
type deployPackageDeployPackageDeploymentPayload struct {
	// Indicates if the mutation completed successfully or not.
	Successful bool `json:"successful"`
	// The object created/updated/deleted by the mutation. May be null if mutation failed.
	Result deployPackageDeployPackageDeploymentPayloadResultDeployment `json:"result"`
	// A list of failed validations. May be blank or null if mutation succeeded.
	Messages []MutationValidationError `json:"messages"`
}

// GetSuccessful returns deployPackageDeployPackageDeploymentPayload.Successful, and is useful for accessing the field via an interface.
func (v *deployPackageDeployPackageDeploymentPayload) GetSuccessful() bool { return v.Successful }

// GetResult returns deployPackageDeployPackageDeploymentPayload.Result, and is useful for accessing the field via an interface.
func (v *deployPackageDeployPackageDeploymentPayload) GetResult() deployPackageDeployPackageDeploymentPayloadResultDeployment {
	return v.Result
}

// GetMessages returns deployPackageDeployPackageDeploymentPayload.Messages, and is useful for accessing the field via an interface.
func (v *deployPackageDeployPackageDeploymentPayload) GetMessages() []MutationValidationError {
	return v.Messages
}

// deployPackageDeployPackageDeploymentPayloadResultDeployment includes the requested fields of the GraphQL type Deployment.
type deployPackageDeployPackageDeploymentPayloadResultDeployment struct {
	Id string `json:"id"`
}

// GetId returns deployPackageDeployPackageDeploymentPayloadResultDeployment.Id, and is useful for accessing the field via an interface.
func (v *deployPackageDeployPackageDeploymentPayloadResultDeployment) GetId() string { return v.Id }

// deployPackageResponse is returned by deployPackage on success.
type deployPackageResponse struct {
	// Enqueues a package for deployment
	DeployPackage deployPackageDeployPackageDeploymentPayload `json:"deployPackage"`
}

// GetDeployPackage returns deployPackageResponse.DeployPackage, and is useful for accessing the field via an interface.
func (v *deployPackageResponse) GetDeployPackage() deployPackageDeployPackageDeploymentPayload {
	return v.DeployPackage
}

// deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload includes the requested fields of the GraphQL type TargetPayload.
type deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload struct {
	// Indicates if the mutation completed successfully or not.
	Successful bool `json:"successful"`
	// The object created/updated/deleted by the mutation. May be null if mutation failed.
	Result deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget `json:"result"`
	// A list of failed validations. May be blank or null if mutation succeeded.
	Messages []MutationValidationError `json:"messages"`
}

// GetSuccessful returns deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload.Successful, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload) GetSuccessful() bool {
	return v.Successful
}

// GetResult returns deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload.Result, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload) GetResult() deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget {
	return v.Result
}

// GetMessages returns deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload.Messages, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload) GetMessages() []MutationValidationError {
	return v.Messages
}

// deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget includes the requested fields of the GraphQL type Target.
type deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget struct {
	Id      string                                                                           `json:"id"`
	Slug    string                                                                           `json:"slug"`
	Project deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTargetProject `json:"project"`
}

// GetId returns deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget.Id, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget) GetId() string {
	return v.Id
}

// GetSlug returns deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget.Slug, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget) GetSlug() string {
	return v.Slug
}

// GetProject returns deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget.Project, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTarget) GetProject() deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTargetProject {
	return v.Project
}

// deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTargetProject includes the requested fields of the GraphQL type Project.
type deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTargetProject struct {
	Id   string `json:"id"`
	Slug string `json:"slug"`
}

// GetId returns deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTargetProject.Id, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTargetProject) GetId() string {
	return v.Id
}

// GetSlug returns deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTargetProject.Slug, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayloadResultTargetProject) GetSlug() string {
	return v.Slug
}

// deployPreviewEnvironmentResponse is returned by deployPreviewEnvironment on success.
type deployPreviewEnvironmentResponse struct {
	// Deploy a Preview Environment
	DeployPreviewEnvironment deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload `json:"deployPreviewEnvironment"`
}

// GetDeployPreviewEnvironment returns deployPreviewEnvironmentResponse.DeployPreviewEnvironment, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentResponse) GetDeployPreviewEnvironment() deployPreviewEnvironmentDeployPreviewEnvironmentTargetPayload {
	return v.DeployPreviewEnvironment
}

// getArtifactsByTypeArtifactsPaginatedArtifacts includes the requested fields of the GraphQL type PaginatedArtifacts.
type getArtifactsByTypeArtifactsPaginatedArtifacts struct {
	// A cursor to the next page of items in the list.
	Next string `json:"next"`
	// A list of type artifact.
	Items []getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact `json:"items"`
}

// GetNext returns getArtifactsByTypeArtifactsPaginatedArtifacts.Next, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeArtifactsPaginatedArtifacts) GetNext() string { return v.Next }

// GetItems returns getArtifactsByTypeArtifactsPaginatedArtifacts.Items, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeArtifactsPaginatedArtifacts) GetItems() []getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact {
	return v.Items
}

// getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact includes the requested fields of the GraphQL type Artifact.
type getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact.Id, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact) GetId() string { return v.Id }

// GetName returns getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact.Name, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact) GetName() string { return v.Name }

// getArtifactsByTypeResponse is returned by getArtifactsByType on success.
type getArtifactsByTypeResponse struct {
	// List all artifacts
	Artifacts getArtifactsByTypeArtifactsPaginatedArtifacts `json:"artifacts"`
}

// GetArtifacts returns getArtifactsByTypeResponse.Artifacts, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeResponse) GetArtifacts() getArtifactsByTypeArtifactsPaginatedArtifacts {
	return v.Artifacts
}

// getDeploymentByIdDeployment includes the requested fields of the GraphQL type Deployment.
type getDeploymentByIdDeployment struct {
	Id     string `json:"id"`
	Status string `json:"status"`
}

// GetId returns getDeploymentByIdDeployment.Id, and is useful for accessing the field via an interface.
func (v *getDeploymentByIdDeployment) GetId() string { return v.Id }

// GetStatus returns getDeploymentByIdDeployment.Status, and is useful for accessing the field via an interface.
func (v *getDeploymentByIdDeployment) GetStatus() string { return v.Status }

// getDeploymentByIdResponse is returned by getDeploymentById on success.
type getDeploymentByIdResponse struct {
	Deployment getDeploymentByIdDeployment `json:"deployment"`
}

// GetDeployment returns getDeploymentByIdResponse.Deployment, and is useful for accessing the field via an interface.
func (v *getDeploymentByIdResponse) GetDeployment() getDeploymentByIdDeployment { return v.Deployment }

// getPackageByNamingConventionGetPackageByNamingConventionPackage includes the requested fields of the GraphQL type Package.
type getPackageByNamingConventionGetPackageByNamingConventionPackage struct {
	Id               string                                                                          `json:"id"`
	NamePrefix       string                                                                          `json:"namePrefix"`
	Manifest         getPackageByNamingConventionGetPackageByNamingConventionPackageManifest         `json:"manifest"`
	ActiveDeployment getPackageByNamingConventionGetPackageByNamingConventionPackageActiveDeployment `json:"activeDeployment"`
	// The target this package will be deployed to
	Target getPackageByNamingConventionGetPackageByNamingConventionPackageTarget `json:"target"`
}

// GetId returns getPackageByNamingConventionGetPackageByNamingConventionPackage.Id, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackage) GetId() string { return v.Id }

// GetNamePrefix returns getPackageByNamingConventionGetPackageByNamingConventionPackage.NamePrefix, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackage) GetNamePrefix() string {
	return v.NamePrefix
}

// GetManifest returns getPackageByNamingConventionGetPackageByNamingConventionPackage.Manifest, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackage) GetManifest() getPackageByNamingConventionGetPackageByNamingConventionPackageManifest {
	return v.Manifest
}

// GetActiveDeployment returns getPackageByNamingConventionGetPackageByNamingConventionPackage.ActiveDeployment, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackage) GetActiveDeployment() getPackageByNamingConventionGetPackageByNamingConventionPackageActiveDeployment {
	return v.ActiveDeployment
}

// GetTarget returns getPackageByNamingConventionGetPackageByNamingConventionPackage.Target, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackage) GetTarget() getPackageByNamingConventionGetPackageByNamingConventionPackageTarget {
	return v.Target
}

// getPackageByNamingConventionGetPackageByNamingConventionPackageActiveDeployment includes the requested fields of the GraphQL type Deployment.
type getPackageByNamingConventionGetPackageByNamingConventionPackageActiveDeployment struct {
	Id     string `json:"id"`
	Status string `json:"status"`
}

// GetId returns getPackageByNamingConventionGetPackageByNamingConventionPackageActiveDeployment.Id, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageActiveDeployment) GetId() string {
	return v.Id
}

// GetStatus returns getPackageByNamingConventionGetPackageByNamingConventionPackageActiveDeployment.Status, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageActiveDeployment) GetStatus() string {
	return v.Status
}

// getPackageByNamingConventionGetPackageByNamingConventionPackageManifest includes the requested fields of the GraphQL type Manifest.
type getPackageByNamingConventionGetPackageByNamingConventionPackageManifest struct {
	Id string `json:"id"`
}

// GetId returns getPackageByNamingConventionGetPackageByNamingConventionPackageManifest.Id, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageManifest) GetId() string {
	return v.Id
}

// getPackageByNamingConventionGetPackageByNamingConventionPackageTarget includes the requested fields of the GraphQL type Target.
type getPackageByNamingConventionGetPackageByNamingConventionPackageTarget struct {
	Id      string                                                                       `json:"id"`
	Project getPackageByNamingConventionGetPackageByNamingConventionPackageTargetProject `json:"project"`
}

// GetId returns getPackageByNamingConventionGetPackageByNamingConventionPackageTarget.Id, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageTarget) GetId() string {
	return v.Id
}

// GetProject returns getPackageByNamingConventionGetPackageByNamingConventionPackageTarget.Project, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageTarget) GetProject() getPackageByNamingConventionGetPackageByNamingConventionPackageTargetProject {
	return v.Project
}

// getPackageByNamingConventionGetPackageByNamingConventionPackageTargetProject includes the requested fields of the GraphQL type Project.
type getPackageByNamingConventionGetPackageByNamingConventionPackageTargetProject struct {
	Id string `json:"id"`
}

// GetId returns getPackageByNamingConventionGetPackageByNamingConventionPackageTargetProject.Id, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageTargetProject) GetId() string {
	return v.Id
}

// getPackageByNamingConventionResponse is returned by getPackageByNamingConvention on success.
type getPackageByNamingConventionResponse struct {
	// Finds a package by its naming convention, the name prefix (project-target-manifest) without the random unique suffix.
	GetPackageByNamingConvention getPackageByNamingConventionGetPackageByNamingConventionPackage `json:"getPackageByNamingConvention"`
}

// GetGetPackageByNamingConvention returns getPackageByNamingConventionResponse.GetPackageByNamingConvention, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionResponse) GetGetPackageByNamingConvention() getPackageByNamingConventionGetPackageByNamingConventionPackage {
	return v.GetPackageByNamingConvention
}

// getProjectByIdProject includes the requested fields of the GraphQL type Project.
type getProjectByIdProject struct {
	Id            string                 `json:"id"`
	DefaultParams map[string]interface{} `json:"-"`
	Slug          string                 `json:"slug"`
}

// GetId returns getProjectByIdProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectByIdProject) GetId() string { return v.Id }

// GetDefaultParams returns getProjectByIdProject.DefaultParams, and is useful for accessing the field via an interface.
func (v *getProjectByIdProject) GetDefaultParams() map[string]interface{} { return v.DefaultParams }

// GetSlug returns getProjectByIdProject.Slug, and is useful for accessing the field via an interface.
func (v *getProjectByIdProject) GetSlug() string { return v.Slug }

func (v *getProjectByIdProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectByIdProject
		DefaultParams json.RawMessage `json:"defaultParams"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectByIdProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DefaultParams
		src := firstPass.DefaultParams
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal getProjectByIdProject.DefaultParams: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetProjectByIdProject struct {
	Id string `json:"id"`

	DefaultParams json.RawMessage `json:"defaultParams"`

	Slug string `json:"slug"`
}

func (v *getProjectByIdProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectByIdProject) __premarshalJSON() (*__premarshalgetProjectByIdProject, error) {
	var retval __premarshalgetProjectByIdProject

	retval.Id = v.Id
	{

		dst := &retval.DefaultParams
		src := v.DefaultParams
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal getProjectByIdProject.DefaultParams: %w", err)
		}
	}
	retval.Slug = v.Slug
	return &retval, nil
}

// getProjectByIdResponse is returned by getProjectById on success.
type getProjectByIdResponse struct {
	Project getProjectByIdProject `json:"project"`
}

// GetProject returns getProjectByIdResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectByIdResponse) GetProject() getProjectByIdProject { return v.Project }

func configurePackage(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	targetId string,
	manifestId string,
	params map[string]interface{},
) (*configurePackageResponse, error) {
	req := &graphql.Request{
		OpName: "configurePackage",
		Query: `
mutation configurePackage ($organizationId: ID!, $targetId: ID!, $manifestId: ID!, $params: JSON!) {
	configurePackage(organizationId: $organizationId, targetId: $targetId, manifestId: $manifestId, params: $params) {
		result {
			id
			params
		}
		successful
		messages {
			message
		}
	}
}
`,
		Variables: &__configurePackageInput{
			OrganizationId: organizationId,
			TargetId:       targetId,
			ManifestId:     manifestId,
			Params:         params,
		},
	}
	var err error

	var data configurePackageResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func decommissionPreviewEnvironment(
	ctx context.Context,
	client graphql.Client,
	orgId string,
	targetId string,
) (*decommissionPreviewEnvironmentResponse, error) {
	req := &graphql.Request{
		OpName: "decommissionPreviewEnvironment",
		Query: `
mutation decommissionPreviewEnvironment ($orgId: ID!, $targetId: ID!) {
	decommissionPreviewEnvironment(organizationId: $orgId, targetId: $targetId) {
		result {
			id
			slug
			project {
				id
				slug
			}
		}
		successful
		messages {
			message
		}
	}
}
`,
		Variables: &__decommissionPreviewEnvironmentInput{
			OrgId:    orgId,
			TargetId: targetId,
		},
	}
	var err error

	var data decommissionPreviewEnvironmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deployPackage(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	targetId string,
	manifestId string,
) (*deployPackageResponse, error) {
	req := &graphql.Request{
		OpName: "deployPackage",
		Query: `
mutation deployPackage ($organizationId: ID!, $targetId: ID!, $manifestId: ID!) {
	deployPackage(organizationId: $organizationId, manifestId: $manifestId, targetId: $targetId) {
		successful
		result {
			id
		}
		messages {
			message
		}
	}
}
`,
		Variables: &__deployPackageInput{
			OrganizationId: organizationId,
			TargetId:       targetId,
			ManifestId:     manifestId,
		},
	}
	var err error

	var data deployPackageResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deployPreviewEnvironment(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	projectId string,
	input PreviewEnvironmentInput,
) (*deployPreviewEnvironmentResponse, error) {
	req := &graphql.Request{
		OpName: "deployPreviewEnvironment",
		Query: `
mutation deployPreviewEnvironment ($organizationId: ID!, $projectId: ID!, $input: PreviewEnvironmentInput!) {
	deployPreviewEnvironment(projectId: $projectId, organizationId: $organizationId, input: $input) {
		successful
		result {
			id
			slug
			project {
				id
				slug
			}
		}
		messages {
			message
		}
	}
}
`,
		Variables: &__deployPreviewEnvironmentInput{
			OrganizationId: organizationId,
			ProjectId:      projectId,
			Input:          input,
		},
	}
	var err error

	var data deployPreviewEnvironmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getArtifactsByType(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	artifactType string,
) (*getArtifactsByTypeResponse, error) {
	req := &graphql.Request{
		OpName: "getArtifactsByType",
		Query: `
query getArtifactsByType ($organizationId: ID!, $artifactType: String!) {
	artifacts(organizationId: $organizationId, input: {filter:{type:$artifactType}}) {
		next
		items {
			id
			name
		}
	}
}
`,
		Variables: &__getArtifactsByTypeInput{
			OrganizationId: organizationId,
			ArtifactType:   artifactType,
		},
	}
	var err error

	var data getArtifactsByTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getDeploymentById(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	id string,
) (*getDeploymentByIdResponse, error) {
	req := &graphql.Request{
		OpName: "getDeploymentById",
		Query: `
query getDeploymentById ($organizationId: ID!, $id: ID!) {
	deployment(organizationId: $organizationId, id: $id) {
		id
		status
	}
}
`,
		Variables: &__getDeploymentByIdInput{
			OrganizationId: organizationId,
			Id:             id,
		},
	}
	var err error

	var data getDeploymentByIdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getPackageByNamingConvention(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	name string,
) (*getPackageByNamingConventionResponse, error) {
	req := &graphql.Request{
		OpName: "getPackageByNamingConvention",
		Query: `
query getPackageByNamingConvention ($organizationId: ID!, $name: String!) {
	getPackageByNamingConvention(organizationId: $organizationId, name: $name) {
		id
		namePrefix
		manifest {
			id
		}
		activeDeployment {
			id
			status
		}
		target {
			id
			project {
				id
			}
		}
	}
}
`,
		Variables: &__getPackageByNamingConventionInput{
			OrganizationId: organizationId,
			Name:           name,
		},
	}
	var err error

	var data getPackageByNamingConventionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getProjectById(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	id string,
) (*getProjectByIdResponse, error) {
	req := &graphql.Request{
		OpName: "getProjectById",
		Query: `
query getProjectById ($organizationId: ID!, $id: ID!) {
	project(organizationId: $organizationId, id: $id) {
		id
		defaultParams
		slug
	}
}
`,
		Variables: &__getProjectByIdInput{
			OrganizationId: organizationId,
			Id:             id,
		},
	}
	var err error

	var data getProjectByIdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
