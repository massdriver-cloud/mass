// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/massdriver-cloud/mass/pkg/api/scalars"
)

// How connecting this type works on the diagram.
type ArtifactDefinitionUiConnectionOrientation string

const (
	// Artifacts of this type are connected via lines on the graph.
	ArtifactDefinitionUiConnectionOrientationLink ArtifactDefinitionUiConnectionOrientation = "LINK"
	// Artifacts of this type are connected by setting environment defaults in the top left corner.
	ArtifactDefinitionUiConnectionOrientationEnvironmentDefault ArtifactDefinitionUiConnectionOrientation = "ENVIRONMENT_DEFAULT"
)

// Arguments required to get container repositories
type ContainerRepositoryInput struct {
	Location  string `json:"location"`
	ImageName string `json:"imageName"`
}

// GetLocation returns ContainerRepositoryInput.Location, and is useful for accessing the field via an interface.
func (v *ContainerRepositoryInput) GetLocation() string { return v.Location }

// GetImageName returns ContainerRepositoryInput.ImageName, and is useful for accessing the field via an interface.
func (v *ContainerRepositoryInput) GetImageName() string { return v.ImageName }

type Credential struct {
	ArtifactDefinitionType string `json:"artifactDefinitionType"`
	ArtifactId             string `json:"artifactId"`
}

// GetArtifactDefinitionType returns Credential.ArtifactDefinitionType, and is useful for accessing the field via an interface.
func (v *Credential) GetArtifactDefinitionType() string { return v.ArtifactDefinitionType }

// GetArtifactId returns Credential.ArtifactId, and is useful for accessing the field via an interface.
func (v *Credential) GetArtifactId() string { return v.ArtifactId }

// Supported artifact download formats
type DownloadFormat string

const (
	DownloadFormatRaw  DownloadFormat = "RAW"
	DownloadFormatYaml DownloadFormat = "YAML"
	DownloadFormatPem  DownloadFormat = "PEM"
	DownloadFormatOvpn DownloadFormat = "OVPN"
)

// MutationValidationError includes the requested fields of the GraphQL type ValidationMessage.
// The GraphQL type's documentation follows.
//
// Validation messages are returned when mutation input does not meet the requirements.
// While client-side validation is highly recommended to provide the best User Experience,
// All inputs will always be validated server-side.
//
// Some examples of validations are:
//
// * Username must be at least 10 characters
// * Email field does not contain an email address
// * Birth Date is required
//
// While GraphQL has support for required values, mutation data fields are always
// set to optional in our API. This allows 'required field' messages
// to be returned in the same manner as other validations. The only exceptions
// are id fields, which may be required to perform updates or deletes.
type MutationValidationError struct {
	// A friendly error message, appropriate for display to the end user.
	//
	// The message is interpolated to include the appropriate variables.
	//
	// Example: `Username must be at least 10 characters`
	//
	// This message may change without notice, so we do not recommend you match against the text.
	// Instead, use the *code* field for matching.
	Message string `json:"message"`
}

// GetMessage returns MutationValidationError.Message, and is useful for accessing the field via an interface.
func (v *MutationValidationError) GetMessage() string { return v.Message }

// Status of a package
type PackageStatus string

const (
	// Package has been created but not yet provisioned
	PackageStatusInitialized PackageStatus = "INITIALIZED"
	// Package has been successfully provisioned
	PackageStatusProvisioned PackageStatus = "PROVISIONED"
	// Package has been decommissioned
	PackageStatusDecommissioned PackageStatus = "DECOMMISSIONED"
	// Package provisioning failed
	PackageStatusFailed PackageStatus = "FAILED"
	// Package exists externally
	PackageStatusExternal PackageStatus = "EXTERNAL"
)

type PreviewEnvironmentInput struct {
	Credentials           []Credential   `json:"credentials"`
	PackageConfigurations map[string]any `json:"-"`
	// CI/CD event information (e.g.: GitHub Action Pull Request Event)
	CiContext map[string]any `json:"-"`
}

// GetCredentials returns PreviewEnvironmentInput.Credentials, and is useful for accessing the field via an interface.
func (v *PreviewEnvironmentInput) GetCredentials() []Credential { return v.Credentials }

// GetPackageConfigurations returns PreviewEnvironmentInput.PackageConfigurations, and is useful for accessing the field via an interface.
func (v *PreviewEnvironmentInput) GetPackageConfigurations() map[string]any {
	return v.PackageConfigurations
}

// GetCiContext returns PreviewEnvironmentInput.CiContext, and is useful for accessing the field via an interface.
func (v *PreviewEnvironmentInput) GetCiContext() map[string]any { return v.CiContext }

func (v *PreviewEnvironmentInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PreviewEnvironmentInput
		PackageConfigurations json.RawMessage `json:"packageConfigurations"`
		CiContext             json.RawMessage `json:"ciContext"`
		graphql.NoUnmarshalJSON
	}
	firstPass.PreviewEnvironmentInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.PackageConfigurations
		src := firstPass.PackageConfigurations
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal PreviewEnvironmentInput.PackageConfigurations: %w", err)
			}
		}
	}

	{
		dst := &v.CiContext
		src := firstPass.CiContext
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal PreviewEnvironmentInput.CiContext: %w", err)
			}
		}
	}
	return nil
}

type __premarshalPreviewEnvironmentInput struct {
	Credentials []Credential `json:"credentials"`

	PackageConfigurations json.RawMessage `json:"packageConfigurations"`

	CiContext json.RawMessage `json:"ciContext"`
}

func (v *PreviewEnvironmentInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PreviewEnvironmentInput) __premarshalJSON() (*__premarshalPreviewEnvironmentInput, error) {
	var retval __premarshalPreviewEnvironmentInput

	retval.Credentials = v.Credentials
	{

		dst := &retval.PackageConfigurations
		src := v.PackageConfigurations
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PreviewEnvironmentInput.PackageConfigurations: %w", err)
		}
	}
	{

		dst := &retval.CiContext
		src := v.CiContext
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal PreviewEnvironmentInput.CiContext: %w", err)
		}
	}
	return &retval, nil
}

// __configurePackageInput is used internally by genqlient
type __configurePackageInput struct {
	OrganizationId string         `json:"organizationId"`
	TargetId       string         `json:"targetId"`
	ManifestId     string         `json:"manifestId"`
	Params         map[string]any `json:"-"`
}

// GetOrganizationId returns __configurePackageInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__configurePackageInput) GetOrganizationId() string { return v.OrganizationId }

// GetTargetId returns __configurePackageInput.TargetId, and is useful for accessing the field via an interface.
func (v *__configurePackageInput) GetTargetId() string { return v.TargetId }

// GetManifestId returns __configurePackageInput.ManifestId, and is useful for accessing the field via an interface.
func (v *__configurePackageInput) GetManifestId() string { return v.ManifestId }

// GetParams returns __configurePackageInput.Params, and is useful for accessing the field via an interface.
func (v *__configurePackageInput) GetParams() map[string]any { return v.Params }

func (v *__configurePackageInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__configurePackageInput
		Params json.RawMessage `json:"params"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__configurePackageInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Params
		src := firstPass.Params
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __configurePackageInput.Params: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__configurePackageInput struct {
	OrganizationId string `json:"organizationId"`

	TargetId string `json:"targetId"`

	ManifestId string `json:"manifestId"`

	Params json.RawMessage `json:"params"`
}

func (v *__configurePackageInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__configurePackageInput) __premarshalJSON() (*__premarshal__configurePackageInput, error) {
	var retval __premarshal__configurePackageInput

	retval.OrganizationId = v.OrganizationId
	retval.TargetId = v.TargetId
	retval.ManifestId = v.ManifestId
	{

		dst := &retval.Params
		src := v.Params
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __configurePackageInput.Params: %w", err)
		}
	}
	return &retval, nil
}

// __containerRepositoryInput is used internally by genqlient
type __containerRepositoryInput struct {
	OrgId      string                   `json:"orgId"`
	ArtifactId string                   `json:"artifactId"`
	Input      ContainerRepositoryInput `json:"input"`
}

// GetOrgId returns __containerRepositoryInput.OrgId, and is useful for accessing the field via an interface.
func (v *__containerRepositoryInput) GetOrgId() string { return v.OrgId }

// GetArtifactId returns __containerRepositoryInput.ArtifactId, and is useful for accessing the field via an interface.
func (v *__containerRepositoryInput) GetArtifactId() string { return v.ArtifactId }

// GetInput returns __containerRepositoryInput.Input, and is useful for accessing the field via an interface.
func (v *__containerRepositoryInput) GetInput() ContainerRepositoryInput { return v.Input }

// __createArtifactInput is used internally by genqlient
type __createArtifactInput struct {
	OrganizationId string         `json:"organizationId"`
	ArtifactName   string         `json:"artifactName"`
	ArtifactSpecs  map[string]any `json:"-"`
	ArtifactType   string         `json:"artifactType"`
	ArtifactData   map[string]any `json:"-"`
}

// GetOrganizationId returns __createArtifactInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__createArtifactInput) GetOrganizationId() string { return v.OrganizationId }

// GetArtifactName returns __createArtifactInput.ArtifactName, and is useful for accessing the field via an interface.
func (v *__createArtifactInput) GetArtifactName() string { return v.ArtifactName }

// GetArtifactSpecs returns __createArtifactInput.ArtifactSpecs, and is useful for accessing the field via an interface.
func (v *__createArtifactInput) GetArtifactSpecs() map[string]any { return v.ArtifactSpecs }

// GetArtifactType returns __createArtifactInput.ArtifactType, and is useful for accessing the field via an interface.
func (v *__createArtifactInput) GetArtifactType() string { return v.ArtifactType }

// GetArtifactData returns __createArtifactInput.ArtifactData, and is useful for accessing the field via an interface.
func (v *__createArtifactInput) GetArtifactData() map[string]any { return v.ArtifactData }

func (v *__createArtifactInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__createArtifactInput
		ArtifactSpecs json.RawMessage `json:"artifactSpecs"`
		ArtifactData  json.RawMessage `json:"artifactData"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__createArtifactInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ArtifactSpecs
		src := firstPass.ArtifactSpecs
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __createArtifactInput.ArtifactSpecs: %w", err)
			}
		}
	}

	{
		dst := &v.ArtifactData
		src := firstPass.ArtifactData
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __createArtifactInput.ArtifactData: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__createArtifactInput struct {
	OrganizationId string `json:"organizationId"`

	ArtifactName string `json:"artifactName"`

	ArtifactSpecs json.RawMessage `json:"artifactSpecs"`

	ArtifactType string `json:"artifactType"`

	ArtifactData json.RawMessage `json:"artifactData"`
}

func (v *__createArtifactInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__createArtifactInput) __premarshalJSON() (*__premarshal__createArtifactInput, error) {
	var retval __premarshal__createArtifactInput

	retval.OrganizationId = v.OrganizationId
	retval.ArtifactName = v.ArtifactName
	{

		dst := &retval.ArtifactSpecs
		src := v.ArtifactSpecs
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __createArtifactInput.ArtifactSpecs: %w", err)
		}
	}
	retval.ArtifactType = v.ArtifactType
	{

		dst := &retval.ArtifactData
		src := v.ArtifactData
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __createArtifactInput.ArtifactData: %w", err)
		}
	}
	return &retval, nil
}

// __decommissionPreviewEnvironmentInput is used internally by genqlient
type __decommissionPreviewEnvironmentInput struct {
	OrgId    string `json:"orgId"`
	TargetId string `json:"targetId"`
}

// GetOrgId returns __decommissionPreviewEnvironmentInput.OrgId, and is useful for accessing the field via an interface.
func (v *__decommissionPreviewEnvironmentInput) GetOrgId() string { return v.OrgId }

// GetTargetId returns __decommissionPreviewEnvironmentInput.TargetId, and is useful for accessing the field via an interface.
func (v *__decommissionPreviewEnvironmentInput) GetTargetId() string { return v.TargetId }

// __deployPackageInput is used internally by genqlient
type __deployPackageInput struct {
	OrganizationId string `json:"organizationId"`
	TargetId       string `json:"targetId"`
	ManifestId     string `json:"manifestId"`
	Message        string `json:"message"`
}

// GetOrganizationId returns __deployPackageInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__deployPackageInput) GetOrganizationId() string { return v.OrganizationId }

// GetTargetId returns __deployPackageInput.TargetId, and is useful for accessing the field via an interface.
func (v *__deployPackageInput) GetTargetId() string { return v.TargetId }

// GetManifestId returns __deployPackageInput.ManifestId, and is useful for accessing the field via an interface.
func (v *__deployPackageInput) GetManifestId() string { return v.ManifestId }

// GetMessage returns __deployPackageInput.Message, and is useful for accessing the field via an interface.
func (v *__deployPackageInput) GetMessage() string { return v.Message }

// __deployPreviewEnvironmentInput is used internally by genqlient
type __deployPreviewEnvironmentInput struct {
	OrganizationId string                  `json:"organizationId"`
	ProjectId      string                  `json:"projectId"`
	Input          PreviewEnvironmentInput `json:"input"`
}

// GetOrganizationId returns __deployPreviewEnvironmentInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__deployPreviewEnvironmentInput) GetOrganizationId() string { return v.OrganizationId }

// GetProjectId returns __deployPreviewEnvironmentInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__deployPreviewEnvironmentInput) GetProjectId() string { return v.ProjectId }

// GetInput returns __deployPreviewEnvironmentInput.Input, and is useful for accessing the field via an interface.
func (v *__deployPreviewEnvironmentInput) GetInput() PreviewEnvironmentInput { return v.Input }

// __downloadArtifactInput is used internally by genqlient
type __downloadArtifactInput struct {
	OrganizationId string         `json:"organizationId"`
	ArtifactId     string         `json:"artifactId"`
	Format         DownloadFormat `json:"format"`
}

// GetOrganizationId returns __downloadArtifactInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__downloadArtifactInput) GetOrganizationId() string { return v.OrganizationId }

// GetArtifactId returns __downloadArtifactInput.ArtifactId, and is useful for accessing the field via an interface.
func (v *__downloadArtifactInput) GetArtifactId() string { return v.ArtifactId }

// GetFormat returns __downloadArtifactInput.Format, and is useful for accessing the field via an interface.
func (v *__downloadArtifactInput) GetFormat() DownloadFormat { return v.Format }

// __getArtifactDefinitionInput is used internally by genqlient
type __getArtifactDefinitionInput struct {
	OrganizationId string `json:"organizationId"`
	Name           string `json:"name"`
}

// GetOrganizationId returns __getArtifactDefinitionInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getArtifactDefinitionInput) GetOrganizationId() string { return v.OrganizationId }

// GetName returns __getArtifactDefinitionInput.Name, and is useful for accessing the field via an interface.
func (v *__getArtifactDefinitionInput) GetName() string { return v.Name }

// __getArtifactsByTypeInput is used internally by genqlient
type __getArtifactsByTypeInput struct {
	OrganizationId string `json:"organizationId"`
	ArtifactType   string `json:"artifactType"`
}

// GetOrganizationId returns __getArtifactsByTypeInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getArtifactsByTypeInput) GetOrganizationId() string { return v.OrganizationId }

// GetArtifactType returns __getArtifactsByTypeInput.ArtifactType, and is useful for accessing the field via an interface.
func (v *__getArtifactsByTypeInput) GetArtifactType() string { return v.ArtifactType }

// __getDeploymentByIdInput is used internally by genqlient
type __getDeploymentByIdInput struct {
	OrganizationId string `json:"organizationId"`
	Id             string `json:"id"`
}

// GetOrganizationId returns __getDeploymentByIdInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getDeploymentByIdInput) GetOrganizationId() string { return v.OrganizationId }

// GetId returns __getDeploymentByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__getDeploymentByIdInput) GetId() string { return v.Id }

// __getEnvironmentByIdInput is used internally by genqlient
type __getEnvironmentByIdInput struct {
	OrganizationId string `json:"organizationId"`
	Id             string `json:"id"`
}

// GetOrganizationId returns __getEnvironmentByIdInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getEnvironmentByIdInput) GetOrganizationId() string { return v.OrganizationId }

// GetId returns __getEnvironmentByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__getEnvironmentByIdInput) GetId() string { return v.Id }

// __getEnvironmentsByProjectInput is used internally by genqlient
type __getEnvironmentsByProjectInput struct {
	OrganizationId string `json:"organizationId"`
	ProjectId      string `json:"projectId"`
}

// GetOrganizationId returns __getEnvironmentsByProjectInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getEnvironmentsByProjectInput) GetOrganizationId() string { return v.OrganizationId }

// GetProjectId returns __getEnvironmentsByProjectInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__getEnvironmentsByProjectInput) GetProjectId() string { return v.ProjectId }

// __getPackageByNamingConventionInput is used internally by genqlient
type __getPackageByNamingConventionInput struct {
	OrganizationId string `json:"organizationId"`
	Name           string `json:"name"`
}

// GetOrganizationId returns __getPackageByNamingConventionInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getPackageByNamingConventionInput) GetOrganizationId() string { return v.OrganizationId }

// GetName returns __getPackageByNamingConventionInput.Name, and is useful for accessing the field via an interface.
func (v *__getPackageByNamingConventionInput) GetName() string { return v.Name }

// __getProjectByIdInput is used internally by genqlient
type __getProjectByIdInput struct {
	OrganizationId string `json:"organizationId"`
	Id             string `json:"id"`
}

// GetOrganizationId returns __getProjectByIdInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getProjectByIdInput) GetOrganizationId() string { return v.OrganizationId }

// GetId returns __getProjectByIdInput.Id, and is useful for accessing the field via an interface.
func (v *__getProjectByIdInput) GetId() string { return v.Id }

// __getProjectsInput is used internally by genqlient
type __getProjectsInput struct {
	OrganizationId string `json:"organizationId"`
}

// GetOrganizationId returns __getProjectsInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__getProjectsInput) GetOrganizationId() string { return v.OrganizationId }

// __listArtifactDefinitionsInput is used internally by genqlient
type __listArtifactDefinitionsInput struct {
	OrganizationId string `json:"organizationId"`
}

// GetOrganizationId returns __listArtifactDefinitionsInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__listArtifactDefinitionsInput) GetOrganizationId() string { return v.OrganizationId }

// __publishArtifactDefinitionInput is used internally by genqlient
type __publishArtifactDefinitionInput struct {
	OrganizationId string         `json:"organizationId"`
	Schema         map[string]any `json:"-"`
}

// GetOrganizationId returns __publishArtifactDefinitionInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *__publishArtifactDefinitionInput) GetOrganizationId() string { return v.OrganizationId }

// GetSchema returns __publishArtifactDefinitionInput.Schema, and is useful for accessing the field via an interface.
func (v *__publishArtifactDefinitionInput) GetSchema() map[string]any { return v.Schema }

func (v *__publishArtifactDefinitionInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__publishArtifactDefinitionInput
		Schema json.RawMessage `json:"schema"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__publishArtifactDefinitionInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Schema
		src := firstPass.Schema
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __publishArtifactDefinitionInput.Schema: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__publishArtifactDefinitionInput struct {
	OrganizationId string `json:"organizationId"`

	Schema json.RawMessage `json:"schema"`
}

func (v *__publishArtifactDefinitionInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__publishArtifactDefinitionInput) __premarshalJSON() (*__premarshal__publishArtifactDefinitionInput, error) {
	var retval __premarshal__publishArtifactDefinitionInput

	retval.OrganizationId = v.OrganizationId
	{

		dst := &retval.Schema
		src := v.Schema
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __publishArtifactDefinitionInput.Schema: %w", err)
		}
	}
	return &retval, nil
}

// configurePackageConfigurePackagePackagePayload includes the requested fields of the GraphQL type PackagePayload.
type configurePackageConfigurePackagePackagePayload struct {
	// The object created/updated/deleted by the mutation. May be null if mutation failed.
	Result configurePackageConfigurePackagePackagePayloadResultPackage `json:"result"`
	// Indicates if the mutation completed successfully or not.
	Successful bool `json:"successful"`
	// A list of failed validations. May be blank or null if mutation succeeded.
	Messages []MutationValidationError `json:"messages"`
}

// GetResult returns configurePackageConfigurePackagePackagePayload.Result, and is useful for accessing the field via an interface.
func (v *configurePackageConfigurePackagePackagePayload) GetResult() configurePackageConfigurePackagePackagePayloadResultPackage {
	return v.Result
}

// GetSuccessful returns configurePackageConfigurePackagePackagePayload.Successful, and is useful for accessing the field via an interface.
func (v *configurePackageConfigurePackagePackagePayload) GetSuccessful() bool { return v.Successful }

// GetMessages returns configurePackageConfigurePackagePackagePayload.Messages, and is useful for accessing the field via an interface.
func (v *configurePackageConfigurePackagePackagePayload) GetMessages() []MutationValidationError {
	return v.Messages
}

// configurePackageConfigurePackagePackagePayloadResultPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// A deployed instance of a bundle in the context of its manifest
type configurePackageConfigurePackagePackagePayloadResultPackage struct {
	// Unique identifier
	Id string `json:"id"`
	// Package configuration parameters
	Params map[string]any `json:"-"`
	// Prefix for resource names
	NamePrefix string `json:"namePrefix"`
}

// GetId returns configurePackageConfigurePackagePackagePayloadResultPackage.Id, and is useful for accessing the field via an interface.
func (v *configurePackageConfigurePackagePackagePayloadResultPackage) GetId() string { return v.Id }

// GetParams returns configurePackageConfigurePackagePackagePayloadResultPackage.Params, and is useful for accessing the field via an interface.
func (v *configurePackageConfigurePackagePackagePayloadResultPackage) GetParams() map[string]any {
	return v.Params
}

// GetNamePrefix returns configurePackageConfigurePackagePackagePayloadResultPackage.NamePrefix, and is useful for accessing the field via an interface.
func (v *configurePackageConfigurePackagePackagePayloadResultPackage) GetNamePrefix() string {
	return v.NamePrefix
}

func (v *configurePackageConfigurePackagePackagePayloadResultPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*configurePackageConfigurePackagePackagePayloadResultPackage
		Params json.RawMessage `json:"params"`
		graphql.NoUnmarshalJSON
	}
	firstPass.configurePackageConfigurePackagePackagePayloadResultPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Params
		src := firstPass.Params
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal configurePackageConfigurePackagePackagePayloadResultPackage.Params: %w", err)
			}
		}
	}
	return nil
}

type __premarshalconfigurePackageConfigurePackagePackagePayloadResultPackage struct {
	Id string `json:"id"`

	Params json.RawMessage `json:"params"`

	NamePrefix string `json:"namePrefix"`
}

func (v *configurePackageConfigurePackagePackagePayloadResultPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *configurePackageConfigurePackagePackagePayloadResultPackage) __premarshalJSON() (*__premarshalconfigurePackageConfigurePackagePackagePayloadResultPackage, error) {
	var retval __premarshalconfigurePackageConfigurePackagePackagePayloadResultPackage

	retval.Id = v.Id
	{

		dst := &retval.Params
		src := v.Params
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal configurePackageConfigurePackagePackagePayloadResultPackage.Params: %w", err)
		}
	}
	retval.NamePrefix = v.NamePrefix
	return &retval, nil
}

// configurePackageResponse is returned by configurePackage on success.
type configurePackageResponse struct {
	// Update a Package's parameters
	ConfigurePackage configurePackageConfigurePackagePackagePayload `json:"configurePackage"`
}

// GetConfigurePackage returns configurePackageResponse.ConfigurePackage, and is useful for accessing the field via an interface.
func (v *configurePackageResponse) GetConfigurePackage() configurePackageConfigurePackagePackagePayload {
	return v.ConfigurePackage
}

// containerRepositoryContainerRepositoryContainerRepositoryAuth includes the requested fields of the GraphQL type ContainerRepositoryAuth.
type containerRepositoryContainerRepositoryContainerRepositoryAuth struct {
	Token   string `json:"token"`
	RepoUri string `json:"repoUri"`
}

// GetToken returns containerRepositoryContainerRepositoryContainerRepositoryAuth.Token, and is useful for accessing the field via an interface.
func (v *containerRepositoryContainerRepositoryContainerRepositoryAuth) GetToken() string {
	return v.Token
}

// GetRepoUri returns containerRepositoryContainerRepositoryContainerRepositoryAuth.RepoUri, and is useful for accessing the field via an interface.
func (v *containerRepositoryContainerRepositoryContainerRepositoryAuth) GetRepoUri() string {
	return v.RepoUri
}

// containerRepositoryResponse is returned by containerRepository on success.
type containerRepositoryResponse struct {
	ContainerRepository containerRepositoryContainerRepositoryContainerRepositoryAuth `json:"containerRepository"`
}

// GetContainerRepository returns containerRepositoryResponse.ContainerRepository, and is useful for accessing the field via an interface.
func (v *containerRepositoryResponse) GetContainerRepository() containerRepositoryContainerRepositoryContainerRepositoryAuth {
	return v.ContainerRepository
}

// createArtifactCreateArtifactArtifactPayload includes the requested fields of the GraphQL type ArtifactPayload.
type createArtifactCreateArtifactArtifactPayload struct {
	// The object created/updated/deleted by the mutation. May be null if mutation failed.
	Result createArtifactCreateArtifactArtifactPayloadResultArtifact `json:"result"`
	// Indicates if the mutation completed successfully or not.
	Successful bool `json:"successful"`
	// A list of failed validations. May be blank or null if mutation succeeded.
	Messages []MutationValidationError `json:"messages"`
}

// GetResult returns createArtifactCreateArtifactArtifactPayload.Result, and is useful for accessing the field via an interface.
func (v *createArtifactCreateArtifactArtifactPayload) GetResult() createArtifactCreateArtifactArtifactPayloadResultArtifact {
	return v.Result
}

// GetSuccessful returns createArtifactCreateArtifactArtifactPayload.Successful, and is useful for accessing the field via an interface.
func (v *createArtifactCreateArtifactArtifactPayload) GetSuccessful() bool { return v.Successful }

// GetMessages returns createArtifactCreateArtifactArtifactPayload.Messages, and is useful for accessing the field via an interface.
func (v *createArtifactCreateArtifactArtifactPayload) GetMessages() []MutationValidationError {
	return v.Messages
}

// createArtifactCreateArtifactArtifactPayloadResultArtifact includes the requested fields of the GraphQL type Artifact.
type createArtifactCreateArtifactArtifactPayloadResultArtifact struct {
	Name string `json:"name"`
	Id   string `json:"id"`
}

// GetName returns createArtifactCreateArtifactArtifactPayloadResultArtifact.Name, and is useful for accessing the field via an interface.
func (v *createArtifactCreateArtifactArtifactPayloadResultArtifact) GetName() string { return v.Name }

// GetId returns createArtifactCreateArtifactArtifactPayloadResultArtifact.Id, and is useful for accessing the field via an interface.
func (v *createArtifactCreateArtifactArtifactPayloadResultArtifact) GetId() string { return v.Id }

// createArtifactResponse is returned by createArtifact on success.
type createArtifactResponse struct {
	// Create an artifact
	CreateArtifact createArtifactCreateArtifactArtifactPayload `json:"createArtifact"`
}

// GetCreateArtifact returns createArtifactResponse.CreateArtifact, and is useful for accessing the field via an interface.
func (v *createArtifactResponse) GetCreateArtifact() createArtifactCreateArtifactArtifactPayload {
	return v.CreateArtifact
}

// decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayload includes the requested fields of the GraphQL type EnvironmentPayload.
type decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayload struct {
	// The object created/updated/deleted by the mutation. May be null if mutation failed.
	Result decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironment `json:"result"`
	// Indicates if the mutation completed successfully or not.
	Successful bool `json:"successful"`
	// A list of failed validations. May be blank or null if mutation succeeded.
	Messages []MutationValidationError `json:"messages"`
}

// GetResult returns decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayload.Result, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayload) GetResult() decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironment {
	return v.Result
}

// GetSuccessful returns decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayload.Successful, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayload) GetSuccessful() bool {
	return v.Successful
}

// GetMessages returns decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayload.Messages, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayload) GetMessages() []MutationValidationError {
	return v.Messages
}

// decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironment includes the requested fields of the GraphQL type Environment.
type decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironment struct {
	Id      string                                                                                                 `json:"id"`
	Slug    string                                                                                                 `json:"slug"`
	Project decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironmentProject `json:"project"`
}

// GetId returns decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironment.Id, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironment) GetId() string {
	return v.Id
}

// GetSlug returns decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironment.Slug, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironment) GetSlug() string {
	return v.Slug
}

// GetProject returns decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironment.Project, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironment) GetProject() decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironmentProject {
	return v.Project
}

// decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironmentProject includes the requested fields of the GraphQL type Project.
type decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironmentProject struct {
	Id   string `json:"id"`
	Slug string `json:"slug"`
}

// GetId returns decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironmentProject.Id, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironmentProject) GetId() string {
	return v.Id
}

// GetSlug returns decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironmentProject.Slug, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayloadResultEnvironmentProject) GetSlug() string {
	return v.Slug
}

// decommissionPreviewEnvironmentResponse is returned by decommissionPreviewEnvironment on success.
type decommissionPreviewEnvironmentResponse struct {
	DecommissionPreviewEnvironment decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayload `json:"decommissionPreviewEnvironment"`
}

// GetDecommissionPreviewEnvironment returns decommissionPreviewEnvironmentResponse.DecommissionPreviewEnvironment, and is useful for accessing the field via an interface.
func (v *decommissionPreviewEnvironmentResponse) GetDecommissionPreviewEnvironment() decommissionPreviewEnvironmentDecommissionPreviewEnvironmentEnvironmentPayload {
	return v.DecommissionPreviewEnvironment
}

// deployPackageDeployPackageDeploymentPayload includes the requested fields of the GraphQL type DeploymentPayload.
type deployPackageDeployPackageDeploymentPayload struct {
	// Indicates if the mutation completed successfully or not.
	Successful bool `json:"successful"`
	// The object created/updated/deleted by the mutation. May be null if mutation failed.
	Result deployPackageDeployPackageDeploymentPayloadResultDeployment `json:"result"`
	// A list of failed validations. May be blank or null if mutation succeeded.
	Messages []MutationValidationError `json:"messages"`
}

// GetSuccessful returns deployPackageDeployPackageDeploymentPayload.Successful, and is useful for accessing the field via an interface.
func (v *deployPackageDeployPackageDeploymentPayload) GetSuccessful() bool { return v.Successful }

// GetResult returns deployPackageDeployPackageDeploymentPayload.Result, and is useful for accessing the field via an interface.
func (v *deployPackageDeployPackageDeploymentPayload) GetResult() deployPackageDeployPackageDeploymentPayloadResultDeployment {
	return v.Result
}

// GetMessages returns deployPackageDeployPackageDeploymentPayload.Messages, and is useful for accessing the field via an interface.
func (v *deployPackageDeployPackageDeploymentPayload) GetMessages() []MutationValidationError {
	return v.Messages
}

// deployPackageDeployPackageDeploymentPayloadResultDeployment includes the requested fields of the GraphQL type Deployment.
// The GraphQL type's documentation follows.
//
// A deployment represents an instance of a bundle being deployed to a target environment
type deployPackageDeployPackageDeploymentPayloadResultDeployment struct {
	Id string `json:"id"`
}

// GetId returns deployPackageDeployPackageDeploymentPayloadResultDeployment.Id, and is useful for accessing the field via an interface.
func (v *deployPackageDeployPackageDeploymentPayloadResultDeployment) GetId() string { return v.Id }

// deployPackageResponse is returned by deployPackage on success.
type deployPackageResponse struct {
	// Enqueues a package for deployment
	DeployPackage deployPackageDeployPackageDeploymentPayload `json:"deployPackage"`
}

// GetDeployPackage returns deployPackageResponse.DeployPackage, and is useful for accessing the field via an interface.
func (v *deployPackageResponse) GetDeployPackage() deployPackageDeployPackageDeploymentPayload {
	return v.DeployPackage
}

// deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayload includes the requested fields of the GraphQL type EnvironmentPayload.
type deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayload struct {
	// Indicates if the mutation completed successfully or not.
	Successful bool `json:"successful"`
	// The object created/updated/deleted by the mutation. May be null if mutation failed.
	Result deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironment `json:"result"`
	// A list of failed validations. May be blank or null if mutation succeeded.
	Messages []MutationValidationError `json:"messages"`
}

// GetSuccessful returns deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayload.Successful, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayload) GetSuccessful() bool {
	return v.Successful
}

// GetResult returns deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayload.Result, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayload) GetResult() deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironment {
	return v.Result
}

// GetMessages returns deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayload.Messages, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayload) GetMessages() []MutationValidationError {
	return v.Messages
}

// deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironment includes the requested fields of the GraphQL type Environment.
type deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironment struct {
	Id      string                                                                                     `json:"id"`
	Slug    string                                                                                     `json:"slug"`
	Project deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironmentProject `json:"project"`
}

// GetId returns deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironment.Id, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironment) GetId() string {
	return v.Id
}

// GetSlug returns deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironment.Slug, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironment) GetSlug() string {
	return v.Slug
}

// GetProject returns deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironment.Project, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironment) GetProject() deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironmentProject {
	return v.Project
}

// deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironmentProject includes the requested fields of the GraphQL type Project.
type deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironmentProject struct {
	Id   string `json:"id"`
	Slug string `json:"slug"`
}

// GetId returns deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironmentProject.Id, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironmentProject) GetId() string {
	return v.Id
}

// GetSlug returns deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironmentProject.Slug, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayloadResultEnvironmentProject) GetSlug() string {
	return v.Slug
}

// deployPreviewEnvironmentResponse is returned by deployPreviewEnvironment on success.
type deployPreviewEnvironmentResponse struct {
	// Deploy a Preview Environment
	DeployPreviewEnvironment deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayload `json:"deployPreviewEnvironment"`
}

// GetDeployPreviewEnvironment returns deployPreviewEnvironmentResponse.DeployPreviewEnvironment, and is useful for accessing the field via an interface.
func (v *deployPreviewEnvironmentResponse) GetDeployPreviewEnvironment() deployPreviewEnvironmentDeployPreviewEnvironmentEnvironmentPayload {
	return v.DeployPreviewEnvironment
}

// downloadArtifactDownloadArtifactRenderedArtifact includes the requested fields of the GraphQL type RenderedArtifact.
type downloadArtifactDownloadArtifactRenderedArtifact struct {
	RenderedArtifact string `json:"renderedArtifact"`
}

// GetRenderedArtifact returns downloadArtifactDownloadArtifactRenderedArtifact.RenderedArtifact, and is useful for accessing the field via an interface.
func (v *downloadArtifactDownloadArtifactRenderedArtifact) GetRenderedArtifact() string {
	return v.RenderedArtifact
}

// downloadArtifactResponse is returned by downloadArtifact on success.
type downloadArtifactResponse struct {
	// Connection data for an artifact rendered in requested format
	DownloadArtifact downloadArtifactDownloadArtifactRenderedArtifact `json:"downloadArtifact"`
}

// GetDownloadArtifact returns downloadArtifactResponse.DownloadArtifact, and is useful for accessing the field via an interface.
func (v *downloadArtifactResponse) GetDownloadArtifact() downloadArtifactDownloadArtifactRenderedArtifact {
	return v.DownloadArtifact
}

// getArtifactDefinitionArtifactDefinition includes the requested fields of the GraphQL type ArtifactDefinition.
// The GraphQL type's documentation follows.
//
// A standardized contract for passing state between infrastructure modules, enabling cross-tool connectivity (e.g. Terraform outputs to Helm values) and automatic resource configuration (e.g. IAM policies, secrets, credentials)
type getArtifactDefinitionArtifactDefinition struct {
	Id     string         `json:"id"`
	Schema map[string]any `json:"-"`
	// The name of this type. Organization scoped: my-org/aws-iam-role
	Name      string                                    `json:"name"`
	Icon      string                                    `json:"icon"`
	Label     string                                    `json:"label"`
	UpdatedAt time.Time                                 `json:"updatedAt"`
	Url       string                                    `json:"url"`
	Ui        getArtifactDefinitionArtifactDefinitionUi `json:"ui"`
}

// GetId returns getArtifactDefinitionArtifactDefinition.Id, and is useful for accessing the field via an interface.
func (v *getArtifactDefinitionArtifactDefinition) GetId() string { return v.Id }

// GetSchema returns getArtifactDefinitionArtifactDefinition.Schema, and is useful for accessing the field via an interface.
func (v *getArtifactDefinitionArtifactDefinition) GetSchema() map[string]any { return v.Schema }

// GetName returns getArtifactDefinitionArtifactDefinition.Name, and is useful for accessing the field via an interface.
func (v *getArtifactDefinitionArtifactDefinition) GetName() string { return v.Name }

// GetIcon returns getArtifactDefinitionArtifactDefinition.Icon, and is useful for accessing the field via an interface.
func (v *getArtifactDefinitionArtifactDefinition) GetIcon() string { return v.Icon }

// GetLabel returns getArtifactDefinitionArtifactDefinition.Label, and is useful for accessing the field via an interface.
func (v *getArtifactDefinitionArtifactDefinition) GetLabel() string { return v.Label }

// GetUpdatedAt returns getArtifactDefinitionArtifactDefinition.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getArtifactDefinitionArtifactDefinition) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetUrl returns getArtifactDefinitionArtifactDefinition.Url, and is useful for accessing the field via an interface.
func (v *getArtifactDefinitionArtifactDefinition) GetUrl() string { return v.Url }

// GetUi returns getArtifactDefinitionArtifactDefinition.Ui, and is useful for accessing the field via an interface.
func (v *getArtifactDefinitionArtifactDefinition) GetUi() getArtifactDefinitionArtifactDefinitionUi {
	return v.Ui
}

func (v *getArtifactDefinitionArtifactDefinition) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getArtifactDefinitionArtifactDefinition
		Schema json.RawMessage `json:"schema"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getArtifactDefinitionArtifactDefinition = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Schema
		src := firstPass.Schema
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getArtifactDefinitionArtifactDefinition.Schema: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetArtifactDefinitionArtifactDefinition struct {
	Id string `json:"id"`

	Schema json.RawMessage `json:"schema"`

	Name string `json:"name"`

	Icon string `json:"icon"`

	Label string `json:"label"`

	UpdatedAt time.Time `json:"updatedAt"`

	Url string `json:"url"`

	Ui getArtifactDefinitionArtifactDefinitionUi `json:"ui"`
}

func (v *getArtifactDefinitionArtifactDefinition) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getArtifactDefinitionArtifactDefinition) __premarshalJSON() (*__premarshalgetArtifactDefinitionArtifactDefinition, error) {
	var retval __premarshalgetArtifactDefinitionArtifactDefinition

	retval.Id = v.Id
	{

		dst := &retval.Schema
		src := v.Schema
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getArtifactDefinitionArtifactDefinition.Schema: %w", err)
		}
	}
	retval.Name = v.Name
	retval.Icon = v.Icon
	retval.Label = v.Label
	retval.UpdatedAt = v.UpdatedAt
	retval.Url = v.Url
	retval.Ui = v.Ui
	return &retval, nil
}

// getArtifactDefinitionArtifactDefinitionUi includes the requested fields of the GraphQL type ArtifactDefinitionUi.
type getArtifactDefinitionArtifactDefinitionUi struct {
	ConnectionOrientation   ArtifactDefinitionUiConnectionOrientation `json:"connectionOrientation"`
	EnvironmentDefaultGroup string                                    `json:"environmentDefaultGroup"`
}

// GetConnectionOrientation returns getArtifactDefinitionArtifactDefinitionUi.ConnectionOrientation, and is useful for accessing the field via an interface.
func (v *getArtifactDefinitionArtifactDefinitionUi) GetConnectionOrientation() ArtifactDefinitionUiConnectionOrientation {
	return v.ConnectionOrientation
}

// GetEnvironmentDefaultGroup returns getArtifactDefinitionArtifactDefinitionUi.EnvironmentDefaultGroup, and is useful for accessing the field via an interface.
func (v *getArtifactDefinitionArtifactDefinitionUi) GetEnvironmentDefaultGroup() string {
	return v.EnvironmentDefaultGroup
}

// getArtifactDefinitionResponse is returned by getArtifactDefinition on success.
type getArtifactDefinitionResponse struct {
	ArtifactDefinition getArtifactDefinitionArtifactDefinition `json:"artifactDefinition"`
}

// GetArtifactDefinition returns getArtifactDefinitionResponse.ArtifactDefinition, and is useful for accessing the field via an interface.
func (v *getArtifactDefinitionResponse) GetArtifactDefinition() getArtifactDefinitionArtifactDefinition {
	return v.ArtifactDefinition
}

// getArtifactsByTypeArtifactsPaginatedArtifacts includes the requested fields of the GraphQL type PaginatedArtifacts.
type getArtifactsByTypeArtifactsPaginatedArtifacts struct {
	// A cursor to the next page of items in the list.
	Next string `json:"next"`
	// A list of type artifact.
	Items []getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact `json:"items"`
}

// GetNext returns getArtifactsByTypeArtifactsPaginatedArtifacts.Next, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeArtifactsPaginatedArtifacts) GetNext() string { return v.Next }

// GetItems returns getArtifactsByTypeArtifactsPaginatedArtifacts.Items, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeArtifactsPaginatedArtifacts) GetItems() []getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact {
	return v.Items
}

// getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact includes the requested fields of the GraphQL type Artifact.
type getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact.Id, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact) GetId() string { return v.Id }

// GetName returns getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact.Name, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeArtifactsPaginatedArtifactsItemsArtifact) GetName() string { return v.Name }

// getArtifactsByTypeResponse is returned by getArtifactsByType on success.
type getArtifactsByTypeResponse struct {
	// List all artifacts
	Artifacts getArtifactsByTypeArtifactsPaginatedArtifacts `json:"artifacts"`
}

// GetArtifacts returns getArtifactsByTypeResponse.Artifacts, and is useful for accessing the field via an interface.
func (v *getArtifactsByTypeResponse) GetArtifacts() getArtifactsByTypeArtifactsPaginatedArtifacts {
	return v.Artifacts
}

// getDeploymentByIdDeployment includes the requested fields of the GraphQL type Deployment.
// The GraphQL type's documentation follows.
//
// A deployment represents an instance of a bundle being deployed to a target environment
type getDeploymentByIdDeployment struct {
	Id     string `json:"id"`
	Status string `json:"status"`
}

// GetId returns getDeploymentByIdDeployment.Id, and is useful for accessing the field via an interface.
func (v *getDeploymentByIdDeployment) GetId() string { return v.Id }

// GetStatus returns getDeploymentByIdDeployment.Status, and is useful for accessing the field via an interface.
func (v *getDeploymentByIdDeployment) GetStatus() string { return v.Status }

// getDeploymentByIdResponse is returned by getDeploymentById on success.
type getDeploymentByIdResponse struct {
	Deployment getDeploymentByIdDeployment `json:"deployment"`
}

// GetDeployment returns getDeploymentByIdResponse.Deployment, and is useful for accessing the field via an interface.
func (v *getDeploymentByIdResponse) GetDeployment() getDeploymentByIdDeployment { return v.Deployment }

// getEnvironmentByIdEnvironment includes the requested fields of the GraphQL type Environment.
type getEnvironmentByIdEnvironment struct {
	Id          string `json:"id"`
	Name        string `json:"name"`
	Slug        string `json:"slug"`
	Description string `json:"description"`
	// Cloud provider costs for this target
	Cost     getEnvironmentByIdEnvironmentCost              `json:"cost"`
	Packages []getEnvironmentByIdEnvironmentPackagesPackage `json:"packages"`
	Project  getEnvironmentByIdEnvironmentProject           `json:"project"`
}

// GetId returns getEnvironmentByIdEnvironment.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironment) GetId() string { return v.Id }

// GetName returns getEnvironmentByIdEnvironment.Name, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironment) GetName() string { return v.Name }

// GetSlug returns getEnvironmentByIdEnvironment.Slug, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironment) GetSlug() string { return v.Slug }

// GetDescription returns getEnvironmentByIdEnvironment.Description, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironment) GetDescription() string { return v.Description }

// GetCost returns getEnvironmentByIdEnvironment.Cost, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironment) GetCost() getEnvironmentByIdEnvironmentCost { return v.Cost }

// GetPackages returns getEnvironmentByIdEnvironment.Packages, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironment) GetPackages() []getEnvironmentByIdEnvironmentPackagesPackage {
	return v.Packages
}

// GetProject returns getEnvironmentByIdEnvironment.Project, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironment) GetProject() getEnvironmentByIdEnvironmentProject {
	return v.Project
}

// getEnvironmentByIdEnvironmentCost includes the requested fields of the GraphQL type Cost.
// The GraphQL type's documentation follows.
//
// Cost information for a resource
type getEnvironmentByIdEnvironmentCost struct {
	// Monthly cost summary
	Monthly getEnvironmentByIdEnvironmentCostMonthlySummary `json:"monthly"`
	// Daily cost summary
	Daily getEnvironmentByIdEnvironmentCostDailySummary `json:"daily"`
}

// GetMonthly returns getEnvironmentByIdEnvironmentCost.Monthly, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentCost) GetMonthly() getEnvironmentByIdEnvironmentCostMonthlySummary {
	return v.Monthly
}

// GetDaily returns getEnvironmentByIdEnvironmentCost.Daily, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentCost) GetDaily() getEnvironmentByIdEnvironmentCostDailySummary {
	return v.Daily
}

// getEnvironmentByIdEnvironmentCostDailySummary includes the requested fields of the GraphQL type Summary.
// The GraphQL type's documentation follows.
//
// Summary of costs over a time period
type getEnvironmentByIdEnvironmentCostDailySummary struct {
	// Average cost sample for the period
	Average getEnvironmentByIdEnvironmentCostDailySummaryAverageCostSample `json:"average"`
}

// GetAverage returns getEnvironmentByIdEnvironmentCostDailySummary.Average, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentCostDailySummary) GetAverage() getEnvironmentByIdEnvironmentCostDailySummaryAverageCostSample {
	return v.Average
}

// getEnvironmentByIdEnvironmentCostDailySummaryAverageCostSample includes the requested fields of the GraphQL type CostSample.
// The GraphQL type's documentation follows.
//
// A single cost measurement
type getEnvironmentByIdEnvironmentCostDailySummaryAverageCostSample struct {
	// The cost amount
	Amount float64 `json:"amount"`
}

// GetAmount returns getEnvironmentByIdEnvironmentCostDailySummaryAverageCostSample.Amount, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentCostDailySummaryAverageCostSample) GetAmount() float64 {
	return v.Amount
}

// getEnvironmentByIdEnvironmentCostMonthlySummary includes the requested fields of the GraphQL type Summary.
// The GraphQL type's documentation follows.
//
// Summary of costs over a time period
type getEnvironmentByIdEnvironmentCostMonthlySummary struct {
	// Average cost sample for the period
	Average getEnvironmentByIdEnvironmentCostMonthlySummaryAverageCostSample `json:"average"`
}

// GetAverage returns getEnvironmentByIdEnvironmentCostMonthlySummary.Average, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentCostMonthlySummary) GetAverage() getEnvironmentByIdEnvironmentCostMonthlySummaryAverageCostSample {
	return v.Average
}

// getEnvironmentByIdEnvironmentCostMonthlySummaryAverageCostSample includes the requested fields of the GraphQL type CostSample.
// The GraphQL type's documentation follows.
//
// A single cost measurement
type getEnvironmentByIdEnvironmentCostMonthlySummaryAverageCostSample struct {
	// The cost amount
	Amount float64 `json:"amount"`
}

// GetAmount returns getEnvironmentByIdEnvironmentCostMonthlySummaryAverageCostSample.Amount, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentCostMonthlySummaryAverageCostSample) GetAmount() float64 {
	return v.Amount
}

// getEnvironmentByIdEnvironmentPackagesPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// A deployed instance of a bundle in the context of its manifest
type getEnvironmentByIdEnvironmentPackagesPackage struct {
	// Unique identifier
	Id string `json:"id"`
	// Package configuration parameters
	Params map[string]any `json:"-"`
	// Artifacts provisioned by this package
	Artifacts []getEnvironmentByIdEnvironmentPackagesPackageArtifactsArtifact `json:"artifacts"`
	// Artifacts from a remote source like another project or a resource not managed by massdriver
	RemoteReferences []getEnvironmentByIdEnvironmentPackagesPackageRemoteReferencesRemoteReference `json:"remoteReferences"`
	// Current status of the package
	Status   PackageStatus                                        `json:"status"`
	Manifest getEnvironmentByIdEnvironmentPackagesPackageManifest `json:"manifest"`
}

// GetId returns getEnvironmentByIdEnvironmentPackagesPackage.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackage) GetId() string { return v.Id }

// GetParams returns getEnvironmentByIdEnvironmentPackagesPackage.Params, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackage) GetParams() map[string]any { return v.Params }

// GetArtifacts returns getEnvironmentByIdEnvironmentPackagesPackage.Artifacts, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackage) GetArtifacts() []getEnvironmentByIdEnvironmentPackagesPackageArtifactsArtifact {
	return v.Artifacts
}

// GetRemoteReferences returns getEnvironmentByIdEnvironmentPackagesPackage.RemoteReferences, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackage) GetRemoteReferences() []getEnvironmentByIdEnvironmentPackagesPackageRemoteReferencesRemoteReference {
	return v.RemoteReferences
}

// GetStatus returns getEnvironmentByIdEnvironmentPackagesPackage.Status, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackage) GetStatus() PackageStatus { return v.Status }

// GetManifest returns getEnvironmentByIdEnvironmentPackagesPackage.Manifest, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackage) GetManifest() getEnvironmentByIdEnvironmentPackagesPackageManifest {
	return v.Manifest
}

func (v *getEnvironmentByIdEnvironmentPackagesPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getEnvironmentByIdEnvironmentPackagesPackage
		Params json.RawMessage `json:"params"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getEnvironmentByIdEnvironmentPackagesPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Params
		src := firstPass.Params
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getEnvironmentByIdEnvironmentPackagesPackage.Params: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetEnvironmentByIdEnvironmentPackagesPackage struct {
	Id string `json:"id"`

	Params json.RawMessage `json:"params"`

	Artifacts []getEnvironmentByIdEnvironmentPackagesPackageArtifactsArtifact `json:"artifacts"`

	RemoteReferences []getEnvironmentByIdEnvironmentPackagesPackageRemoteReferencesRemoteReference `json:"remoteReferences"`

	Status PackageStatus `json:"status"`

	Manifest getEnvironmentByIdEnvironmentPackagesPackageManifest `json:"manifest"`
}

func (v *getEnvironmentByIdEnvironmentPackagesPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getEnvironmentByIdEnvironmentPackagesPackage) __premarshalJSON() (*__premarshalgetEnvironmentByIdEnvironmentPackagesPackage, error) {
	var retval __premarshalgetEnvironmentByIdEnvironmentPackagesPackage

	retval.Id = v.Id
	{

		dst := &retval.Params
		src := v.Params
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getEnvironmentByIdEnvironmentPackagesPackage.Params: %w", err)
		}
	}
	retval.Artifacts = v.Artifacts
	retval.RemoteReferences = v.RemoteReferences
	retval.Status = v.Status
	retval.Manifest = v.Manifest
	return &retval, nil
}

// getEnvironmentByIdEnvironmentPackagesPackageArtifactsArtifact includes the requested fields of the GraphQL type Artifact.
type getEnvironmentByIdEnvironmentPackagesPackageArtifactsArtifact struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	// The bundle's artifact field (output field) that produced this artifact.
	Field string `json:"field"`
}

// GetId returns getEnvironmentByIdEnvironmentPackagesPackageArtifactsArtifact.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackageArtifactsArtifact) GetId() string { return v.Id }

// GetName returns getEnvironmentByIdEnvironmentPackagesPackageArtifactsArtifact.Name, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackageArtifactsArtifact) GetName() string {
	return v.Name
}

// GetField returns getEnvironmentByIdEnvironmentPackagesPackageArtifactsArtifact.Field, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackageArtifactsArtifact) GetField() string {
	return v.Field
}

// getEnvironmentByIdEnvironmentPackagesPackageManifest includes the requested fields of the GraphQL type Manifest.
// The GraphQL type's documentation follows.
//
// An instance of a bundle in a project's architecture, providing context for how the bundle is used
type getEnvironmentByIdEnvironmentPackagesPackageManifest struct {
	Id          string                                                     `json:"id"`
	Name        string                                                     `json:"name"`
	Slug        string                                                     `json:"slug"`
	Suffix      string                                                     `json:"suffix"`
	Description string                                                     `json:"description"`
	Bundle      getEnvironmentByIdEnvironmentPackagesPackageManifestBundle `json:"bundle"`
}

// GetId returns getEnvironmentByIdEnvironmentPackagesPackageManifest.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackageManifest) GetId() string { return v.Id }

// GetName returns getEnvironmentByIdEnvironmentPackagesPackageManifest.Name, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackageManifest) GetName() string { return v.Name }

// GetSlug returns getEnvironmentByIdEnvironmentPackagesPackageManifest.Slug, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackageManifest) GetSlug() string { return v.Slug }

// GetSuffix returns getEnvironmentByIdEnvironmentPackagesPackageManifest.Suffix, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackageManifest) GetSuffix() string { return v.Suffix }

// GetDescription returns getEnvironmentByIdEnvironmentPackagesPackageManifest.Description, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackageManifest) GetDescription() string {
	return v.Description
}

// GetBundle returns getEnvironmentByIdEnvironmentPackagesPackageManifest.Bundle, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackageManifest) GetBundle() getEnvironmentByIdEnvironmentPackagesPackageManifestBundle {
	return v.Bundle
}

// getEnvironmentByIdEnvironmentPackagesPackageManifestBundle includes the requested fields of the GraphQL type Bundle.
// The GraphQL type's documentation follows.
//
// A reusable infrastructure component that packages IaC modules, policies, runbooks, and cloud dependencies into a deliverable software component
type getEnvironmentByIdEnvironmentPackagesPackageManifestBundle struct {
	// Unique identifier
	Id string `json:"id"`
	// Name of the bundle
	Name string `json:"name"`
	// Raw massdriver.yaml spec
	Spec map[string]any `json:"-"`
	// Version of the bundle specification
	SpecVersion string `json:"specVersion"`
}

// GetId returns getEnvironmentByIdEnvironmentPackagesPackageManifestBundle.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackageManifestBundle) GetId() string { return v.Id }

// GetName returns getEnvironmentByIdEnvironmentPackagesPackageManifestBundle.Name, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackageManifestBundle) GetName() string { return v.Name }

// GetSpec returns getEnvironmentByIdEnvironmentPackagesPackageManifestBundle.Spec, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackageManifestBundle) GetSpec() map[string]any {
	return v.Spec
}

// GetSpecVersion returns getEnvironmentByIdEnvironmentPackagesPackageManifestBundle.SpecVersion, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackageManifestBundle) GetSpecVersion() string {
	return v.SpecVersion
}

func (v *getEnvironmentByIdEnvironmentPackagesPackageManifestBundle) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getEnvironmentByIdEnvironmentPackagesPackageManifestBundle
		Spec json.RawMessage `json:"spec"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getEnvironmentByIdEnvironmentPackagesPackageManifestBundle = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Spec
		src := firstPass.Spec
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getEnvironmentByIdEnvironmentPackagesPackageManifestBundle.Spec: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetEnvironmentByIdEnvironmentPackagesPackageManifestBundle struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Spec json.RawMessage `json:"spec"`

	SpecVersion string `json:"specVersion"`
}

func (v *getEnvironmentByIdEnvironmentPackagesPackageManifestBundle) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getEnvironmentByIdEnvironmentPackagesPackageManifestBundle) __premarshalJSON() (*__premarshalgetEnvironmentByIdEnvironmentPackagesPackageManifestBundle, error) {
	var retval __premarshalgetEnvironmentByIdEnvironmentPackagesPackageManifestBundle

	retval.Id = v.Id
	retval.Name = v.Name
	{

		dst := &retval.Spec
		src := v.Spec
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getEnvironmentByIdEnvironmentPackagesPackageManifestBundle.Spec: %w", err)
		}
	}
	retval.SpecVersion = v.SpecVersion
	return &retval, nil
}

// getEnvironmentByIdEnvironmentPackagesPackageRemoteReferencesRemoteReference includes the requested fields of the GraphQL type RemoteReference.
type getEnvironmentByIdEnvironmentPackagesPackageRemoteReferencesRemoteReference struct {
	Artifact getEnvironmentByIdEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact `json:"artifact"`
}

// GetArtifact returns getEnvironmentByIdEnvironmentPackagesPackageRemoteReferencesRemoteReference.Artifact, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackageRemoteReferencesRemoteReference) GetArtifact() getEnvironmentByIdEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact {
	return v.Artifact
}

// getEnvironmentByIdEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact includes the requested fields of the GraphQL type Artifact.
type getEnvironmentByIdEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	// The bundle's artifact field (output field) that produced this artifact.
	Field string `json:"field"`
}

// GetId returns getEnvironmentByIdEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact) GetId() string {
	return v.Id
}

// GetName returns getEnvironmentByIdEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact.Name, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact) GetName() string {
	return v.Name
}

// GetField returns getEnvironmentByIdEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact.Field, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact) GetField() string {
	return v.Field
}

// getEnvironmentByIdEnvironmentProject includes the requested fields of the GraphQL type Project.
type getEnvironmentByIdEnvironmentProject struct {
	Id   string `json:"id"`
	Slug string `json:"slug"`
}

// GetId returns getEnvironmentByIdEnvironmentProject.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentProject) GetId() string { return v.Id }

// GetSlug returns getEnvironmentByIdEnvironmentProject.Slug, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdEnvironmentProject) GetSlug() string { return v.Slug }

// getEnvironmentByIdResponse is returned by getEnvironmentById on success.
type getEnvironmentByIdResponse struct {
	Environment getEnvironmentByIdEnvironment `json:"environment"`
}

// GetEnvironment returns getEnvironmentByIdResponse.Environment, and is useful for accessing the field via an interface.
func (v *getEnvironmentByIdResponse) GetEnvironment() getEnvironmentByIdEnvironment {
	return v.Environment
}

// getEnvironmentsByProjectProject includes the requested fields of the GraphQL type Project.
type getEnvironmentsByProjectProject struct {
	Environments []getEnvironmentsByProjectProjectEnvironmentsEnvironment `json:"environments"`
}

// GetEnvironments returns getEnvironmentsByProjectProject.Environments, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProject) GetEnvironments() []getEnvironmentsByProjectProjectEnvironmentsEnvironment {
	return v.Environments
}

// getEnvironmentsByProjectProjectEnvironmentsEnvironment includes the requested fields of the GraphQL type Environment.
type getEnvironmentsByProjectProjectEnvironmentsEnvironment struct {
	Id          string `json:"id"`
	Name        string `json:"name"`
	Slug        string `json:"slug"`
	Description string `json:"description"`
	// Cloud provider costs for this target
	Cost     getEnvironmentsByProjectProjectEnvironmentsEnvironmentCost              `json:"cost"`
	Packages []getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage `json:"packages"`
	Project  getEnvironmentsByProjectProjectEnvironmentsEnvironmentProject           `json:"project"`
}

// GetId returns getEnvironmentsByProjectProjectEnvironmentsEnvironment.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironment) GetId() string { return v.Id }

// GetName returns getEnvironmentsByProjectProjectEnvironmentsEnvironment.Name, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironment) GetName() string { return v.Name }

// GetSlug returns getEnvironmentsByProjectProjectEnvironmentsEnvironment.Slug, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironment) GetSlug() string { return v.Slug }

// GetDescription returns getEnvironmentsByProjectProjectEnvironmentsEnvironment.Description, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironment) GetDescription() string {
	return v.Description
}

// GetCost returns getEnvironmentsByProjectProjectEnvironmentsEnvironment.Cost, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironment) GetCost() getEnvironmentsByProjectProjectEnvironmentsEnvironmentCost {
	return v.Cost
}

// GetPackages returns getEnvironmentsByProjectProjectEnvironmentsEnvironment.Packages, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironment) GetPackages() []getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage {
	return v.Packages
}

// GetProject returns getEnvironmentsByProjectProjectEnvironmentsEnvironment.Project, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironment) GetProject() getEnvironmentsByProjectProjectEnvironmentsEnvironmentProject {
	return v.Project
}

// getEnvironmentsByProjectProjectEnvironmentsEnvironmentCost includes the requested fields of the GraphQL type Cost.
// The GraphQL type's documentation follows.
//
// Cost information for a resource
type getEnvironmentsByProjectProjectEnvironmentsEnvironmentCost struct {
	// Monthly cost summary
	Monthly getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostMonthlySummary `json:"monthly"`
	// Daily cost summary
	Daily getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostDailySummary `json:"daily"`
}

// GetMonthly returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentCost.Monthly, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentCost) GetMonthly() getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostMonthlySummary {
	return v.Monthly
}

// GetDaily returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentCost.Daily, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentCost) GetDaily() getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostDailySummary {
	return v.Daily
}

// getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostDailySummary includes the requested fields of the GraphQL type Summary.
// The GraphQL type's documentation follows.
//
// Summary of costs over a time period
type getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostDailySummary struct {
	// Average cost sample for the period
	Average getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostDailySummaryAverageCostSample `json:"average"`
}

// GetAverage returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostDailySummary.Average, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostDailySummary) GetAverage() getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostDailySummaryAverageCostSample {
	return v.Average
}

// getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostDailySummaryAverageCostSample includes the requested fields of the GraphQL type CostSample.
// The GraphQL type's documentation follows.
//
// A single cost measurement
type getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostDailySummaryAverageCostSample struct {
	// The cost amount
	Amount float64 `json:"amount"`
}

// GetAmount returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostDailySummaryAverageCostSample.Amount, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostDailySummaryAverageCostSample) GetAmount() float64 {
	return v.Amount
}

// getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostMonthlySummary includes the requested fields of the GraphQL type Summary.
// The GraphQL type's documentation follows.
//
// Summary of costs over a time period
type getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostMonthlySummary struct {
	// Average cost sample for the period
	Average getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostMonthlySummaryAverageCostSample `json:"average"`
}

// GetAverage returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostMonthlySummary.Average, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostMonthlySummary) GetAverage() getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostMonthlySummaryAverageCostSample {
	return v.Average
}

// getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostMonthlySummaryAverageCostSample includes the requested fields of the GraphQL type CostSample.
// The GraphQL type's documentation follows.
//
// A single cost measurement
type getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostMonthlySummaryAverageCostSample struct {
	// The cost amount
	Amount float64 `json:"amount"`
}

// GetAmount returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostMonthlySummaryAverageCostSample.Amount, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentCostMonthlySummaryAverageCostSample) GetAmount() float64 {
	return v.Amount
}

// getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// A deployed instance of a bundle in the context of its manifest
type getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage struct {
	// Unique identifier
	Id string `json:"id"`
	// Prefix for resource names
	NamePrefix string `json:"namePrefix"`
	// Current status of the package
	Status PackageStatus `json:"status"`
	// Package configuration parameters
	Params map[string]any `json:"-"`
	// Artifacts provisioned by this package
	Artifacts []getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageArtifactsArtifact `json:"artifacts"`
	// Artifacts from a remote source like another project or a resource not managed by massdriver
	RemoteReferences []getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageRemoteReferencesRemoteReference `json:"remoteReferences"`
	Manifest         getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifest                          `json:"manifest"`
}

// GetId returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage) GetId() string {
	return v.Id
}

// GetNamePrefix returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage.NamePrefix, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage) GetNamePrefix() string {
	return v.NamePrefix
}

// GetStatus returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage.Status, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage) GetStatus() PackageStatus {
	return v.Status
}

// GetParams returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage.Params, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage) GetParams() map[string]any {
	return v.Params
}

// GetArtifacts returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage.Artifacts, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage) GetArtifacts() []getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageArtifactsArtifact {
	return v.Artifacts
}

// GetRemoteReferences returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage.RemoteReferences, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage) GetRemoteReferences() []getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageRemoteReferencesRemoteReference {
	return v.RemoteReferences
}

// GetManifest returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage.Manifest, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage) GetManifest() getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifest {
	return v.Manifest
}

func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage
		Params json.RawMessage `json:"params"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Params
		src := firstPass.Params
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage.Params: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage struct {
	Id string `json:"id"`

	NamePrefix string `json:"namePrefix"`

	Status PackageStatus `json:"status"`

	Params json.RawMessage `json:"params"`

	Artifacts []getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageArtifactsArtifact `json:"artifacts"`

	RemoteReferences []getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageRemoteReferencesRemoteReference `json:"remoteReferences"`

	Manifest getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifest `json:"manifest"`
}

func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage) __premarshalJSON() (*__premarshalgetEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage, error) {
	var retval __premarshalgetEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage

	retval.Id = v.Id
	retval.NamePrefix = v.NamePrefix
	retval.Status = v.Status
	{

		dst := &retval.Params
		src := v.Params
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackage.Params: %w", err)
		}
	}
	retval.Artifacts = v.Artifacts
	retval.RemoteReferences = v.RemoteReferences
	retval.Manifest = v.Manifest
	return &retval, nil
}

// getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageArtifactsArtifact includes the requested fields of the GraphQL type Artifact.
type getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageArtifactsArtifact struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	// The bundle's artifact field (output field) that produced this artifact.
	Field string `json:"field"`
}

// GetId returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageArtifactsArtifact.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageArtifactsArtifact) GetId() string {
	return v.Id
}

// GetName returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageArtifactsArtifact.Name, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageArtifactsArtifact) GetName() string {
	return v.Name
}

// GetField returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageArtifactsArtifact.Field, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageArtifactsArtifact) GetField() string {
	return v.Field
}

// getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifest includes the requested fields of the GraphQL type Manifest.
// The GraphQL type's documentation follows.
//
// An instance of a bundle in a project's architecture, providing context for how the bundle is used
type getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifest struct {
	Id          string                                                                              `json:"id"`
	Name        string                                                                              `json:"name"`
	Slug        string                                                                              `json:"slug"`
	Suffix      string                                                                              `json:"suffix"`
	Description string                                                                              `json:"description"`
	Bundle      getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle `json:"bundle"`
}

// GetId returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifest.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifest) GetId() string {
	return v.Id
}

// GetName returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifest.Name, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifest) GetName() string {
	return v.Name
}

// GetSlug returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifest.Slug, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifest) GetSlug() string {
	return v.Slug
}

// GetSuffix returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifest.Suffix, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifest) GetSuffix() string {
	return v.Suffix
}

// GetDescription returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifest.Description, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifest) GetDescription() string {
	return v.Description
}

// GetBundle returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifest.Bundle, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifest) GetBundle() getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle {
	return v.Bundle
}

// getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle includes the requested fields of the GraphQL type Bundle.
// The GraphQL type's documentation follows.
//
// A reusable infrastructure component that packages IaC modules, policies, runbooks, and cloud dependencies into a deliverable software component
type getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle struct {
	// Unique identifier
	Id string `json:"id"`
	// Name of the bundle
	Name string `json:"name"`
	// Raw massdriver.yaml spec
	Spec map[string]any `json:"-"`
	// Version of the bundle specification
	SpecVersion string `json:"specVersion"`
}

// GetId returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle) GetId() string {
	return v.Id
}

// GetName returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle.Name, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle) GetName() string {
	return v.Name
}

// GetSpec returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle.Spec, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle) GetSpec() map[string]any {
	return v.Spec
}

// GetSpecVersion returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle.SpecVersion, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle) GetSpecVersion() string {
	return v.SpecVersion
}

func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle
		Spec json.RawMessage `json:"spec"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Spec
		src := firstPass.Spec
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle.Spec: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Spec json.RawMessage `json:"spec"`

	SpecVersion string `json:"specVersion"`
}

func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle) __premarshalJSON() (*__premarshalgetEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle, error) {
	var retval __premarshalgetEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle

	retval.Id = v.Id
	retval.Name = v.Name
	{

		dst := &retval.Spec
		src := v.Spec
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageManifestBundle.Spec: %w", err)
		}
	}
	retval.SpecVersion = v.SpecVersion
	return &retval, nil
}

// getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageRemoteReferencesRemoteReference includes the requested fields of the GraphQL type RemoteReference.
type getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageRemoteReferencesRemoteReference struct {
	Artifact getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact `json:"artifact"`
}

// GetArtifact returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageRemoteReferencesRemoteReference.Artifact, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageRemoteReferencesRemoteReference) GetArtifact() getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact {
	return v.Artifact
}

// getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact includes the requested fields of the GraphQL type Artifact.
type getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	// The bundle's artifact field (output field) that produced this artifact.
	Field string `json:"field"`
}

// GetId returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact) GetId() string {
	return v.Id
}

// GetName returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact.Name, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact) GetName() string {
	return v.Name
}

// GetField returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact.Field, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentPackagesPackageRemoteReferencesRemoteReferenceArtifact) GetField() string {
	return v.Field
}

// getEnvironmentsByProjectProjectEnvironmentsEnvironmentProject includes the requested fields of the GraphQL type Project.
type getEnvironmentsByProjectProjectEnvironmentsEnvironmentProject struct {
	Id   string `json:"id"`
	Slug string `json:"slug"`
}

// GetId returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentProject.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentProject) GetId() string { return v.Id }

// GetSlug returns getEnvironmentsByProjectProjectEnvironmentsEnvironmentProject.Slug, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectProjectEnvironmentsEnvironmentProject) GetSlug() string {
	return v.Slug
}

// getEnvironmentsByProjectResponse is returned by getEnvironmentsByProject on success.
type getEnvironmentsByProjectResponse struct {
	Project getEnvironmentsByProjectProject `json:"project"`
}

// GetProject returns getEnvironmentsByProjectResponse.Project, and is useful for accessing the field via an interface.
func (v *getEnvironmentsByProjectResponse) GetProject() getEnvironmentsByProjectProject {
	return v.Project
}

// getPackageByNamingConventionGetPackageByNamingConventionPackage includes the requested fields of the GraphQL type Package.
// The GraphQL type's documentation follows.
//
// A deployed instance of a bundle in the context of its manifest
type getPackageByNamingConventionGetPackageByNamingConventionPackage struct {
	// Unique identifier
	Id string `json:"id"`
	// Prefix for resource names
	NamePrefix string `json:"namePrefix"`
	// Current status of the package
	Status PackageStatus `json:"status"`
	// Package configuration parameters
	Params map[string]any `json:"-"`
	// Artifacts provisioned by this package
	Artifacts []getPackageByNamingConventionGetPackageByNamingConventionPackageArtifactsArtifact `json:"artifacts"`
	// Artifacts from a remote source like another project or a resource not managed by massdriver
	RemoteReferences []getPackageByNamingConventionGetPackageByNamingConventionPackageRemoteReferencesRemoteReference `json:"remoteReferences"`
	Manifest         getPackageByNamingConventionGetPackageByNamingConventionPackageManifest                          `json:"manifest"`
	// The environment this package will be deployed to
	Environment getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironment `json:"environment"`
}

// GetId returns getPackageByNamingConventionGetPackageByNamingConventionPackage.Id, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackage) GetId() string { return v.Id }

// GetNamePrefix returns getPackageByNamingConventionGetPackageByNamingConventionPackage.NamePrefix, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackage) GetNamePrefix() string {
	return v.NamePrefix
}

// GetStatus returns getPackageByNamingConventionGetPackageByNamingConventionPackage.Status, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackage) GetStatus() PackageStatus {
	return v.Status
}

// GetParams returns getPackageByNamingConventionGetPackageByNamingConventionPackage.Params, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackage) GetParams() map[string]any {
	return v.Params
}

// GetArtifacts returns getPackageByNamingConventionGetPackageByNamingConventionPackage.Artifacts, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackage) GetArtifacts() []getPackageByNamingConventionGetPackageByNamingConventionPackageArtifactsArtifact {
	return v.Artifacts
}

// GetRemoteReferences returns getPackageByNamingConventionGetPackageByNamingConventionPackage.RemoteReferences, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackage) GetRemoteReferences() []getPackageByNamingConventionGetPackageByNamingConventionPackageRemoteReferencesRemoteReference {
	return v.RemoteReferences
}

// GetManifest returns getPackageByNamingConventionGetPackageByNamingConventionPackage.Manifest, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackage) GetManifest() getPackageByNamingConventionGetPackageByNamingConventionPackageManifest {
	return v.Manifest
}

// GetEnvironment returns getPackageByNamingConventionGetPackageByNamingConventionPackage.Environment, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackage) GetEnvironment() getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironment {
	return v.Environment
}

func (v *getPackageByNamingConventionGetPackageByNamingConventionPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getPackageByNamingConventionGetPackageByNamingConventionPackage
		Params json.RawMessage `json:"params"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getPackageByNamingConventionGetPackageByNamingConventionPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Params
		src := firstPass.Params
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getPackageByNamingConventionGetPackageByNamingConventionPackage.Params: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetPackageByNamingConventionGetPackageByNamingConventionPackage struct {
	Id string `json:"id"`

	NamePrefix string `json:"namePrefix"`

	Status PackageStatus `json:"status"`

	Params json.RawMessage `json:"params"`

	Artifacts []getPackageByNamingConventionGetPackageByNamingConventionPackageArtifactsArtifact `json:"artifacts"`

	RemoteReferences []getPackageByNamingConventionGetPackageByNamingConventionPackageRemoteReferencesRemoteReference `json:"remoteReferences"`

	Manifest getPackageByNamingConventionGetPackageByNamingConventionPackageManifest `json:"manifest"`

	Environment getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironment `json:"environment"`
}

func (v *getPackageByNamingConventionGetPackageByNamingConventionPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getPackageByNamingConventionGetPackageByNamingConventionPackage) __premarshalJSON() (*__premarshalgetPackageByNamingConventionGetPackageByNamingConventionPackage, error) {
	var retval __premarshalgetPackageByNamingConventionGetPackageByNamingConventionPackage

	retval.Id = v.Id
	retval.NamePrefix = v.NamePrefix
	retval.Status = v.Status
	{

		dst := &retval.Params
		src := v.Params
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getPackageByNamingConventionGetPackageByNamingConventionPackage.Params: %w", err)
		}
	}
	retval.Artifacts = v.Artifacts
	retval.RemoteReferences = v.RemoteReferences
	retval.Manifest = v.Manifest
	retval.Environment = v.Environment
	return &retval, nil
}

// getPackageByNamingConventionGetPackageByNamingConventionPackageArtifactsArtifact includes the requested fields of the GraphQL type Artifact.
type getPackageByNamingConventionGetPackageByNamingConventionPackageArtifactsArtifact struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	// The bundle's artifact field (output field) that produced this artifact.
	Field string `json:"field"`
}

// GetId returns getPackageByNamingConventionGetPackageByNamingConventionPackageArtifactsArtifact.Id, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageArtifactsArtifact) GetId() string {
	return v.Id
}

// GetName returns getPackageByNamingConventionGetPackageByNamingConventionPackageArtifactsArtifact.Name, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageArtifactsArtifact) GetName() string {
	return v.Name
}

// GetField returns getPackageByNamingConventionGetPackageByNamingConventionPackageArtifactsArtifact.Field, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageArtifactsArtifact) GetField() string {
	return v.Field
}

// getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironment includes the requested fields of the GraphQL type Environment.
type getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironment struct {
	Id      string                                                                            `json:"id"`
	Slug    string                                                                            `json:"slug"`
	Project getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironmentProject `json:"project"`
}

// GetId returns getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironment.Id, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironment) GetId() string {
	return v.Id
}

// GetSlug returns getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironment.Slug, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironment) GetSlug() string {
	return v.Slug
}

// GetProject returns getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironment.Project, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironment) GetProject() getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironmentProject {
	return v.Project
}

// getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironmentProject includes the requested fields of the GraphQL type Project.
type getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironmentProject struct {
	Id   string `json:"id"`
	Slug string `json:"slug"`
}

// GetId returns getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironmentProject.Id, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironmentProject) GetId() string {
	return v.Id
}

// GetSlug returns getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironmentProject.Slug, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageEnvironmentProject) GetSlug() string {
	return v.Slug
}

// getPackageByNamingConventionGetPackageByNamingConventionPackageManifest includes the requested fields of the GraphQL type Manifest.
// The GraphQL type's documentation follows.
//
// An instance of a bundle in a project's architecture, providing context for how the bundle is used
type getPackageByNamingConventionGetPackageByNamingConventionPackageManifest struct {
	Id          string                                                                        `json:"id"`
	Name        string                                                                        `json:"name"`
	Slug        string                                                                        `json:"slug"`
	Suffix      string                                                                        `json:"suffix"`
	Description string                                                                        `json:"description"`
	Bundle      getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle `json:"bundle"`
}

// GetId returns getPackageByNamingConventionGetPackageByNamingConventionPackageManifest.Id, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageManifest) GetId() string {
	return v.Id
}

// GetName returns getPackageByNamingConventionGetPackageByNamingConventionPackageManifest.Name, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageManifest) GetName() string {
	return v.Name
}

// GetSlug returns getPackageByNamingConventionGetPackageByNamingConventionPackageManifest.Slug, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageManifest) GetSlug() string {
	return v.Slug
}

// GetSuffix returns getPackageByNamingConventionGetPackageByNamingConventionPackageManifest.Suffix, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageManifest) GetSuffix() string {
	return v.Suffix
}

// GetDescription returns getPackageByNamingConventionGetPackageByNamingConventionPackageManifest.Description, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageManifest) GetDescription() string {
	return v.Description
}

// GetBundle returns getPackageByNamingConventionGetPackageByNamingConventionPackageManifest.Bundle, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageManifest) GetBundle() getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle {
	return v.Bundle
}

// getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle includes the requested fields of the GraphQL type Bundle.
// The GraphQL type's documentation follows.
//
// A reusable infrastructure component that packages IaC modules, policies, runbooks, and cloud dependencies into a deliverable software component
type getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle struct {
	// Unique identifier
	Id string `json:"id"`
	// Name of the bundle
	Name string `json:"name"`
	// Raw massdriver.yaml spec
	Spec map[string]any `json:"-"`
	// Version of the bundle specification
	SpecVersion string `json:"specVersion"`
}

// GetId returns getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle.Id, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle) GetId() string {
	return v.Id
}

// GetName returns getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle.Name, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle) GetName() string {
	return v.Name
}

// GetSpec returns getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle.Spec, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle) GetSpec() map[string]any {
	return v.Spec
}

// GetSpecVersion returns getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle.SpecVersion, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle) GetSpecVersion() string {
	return v.SpecVersion
}

func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle
		Spec json.RawMessage `json:"spec"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Spec
		src := firstPass.Spec
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle.Spec: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Spec json.RawMessage `json:"spec"`

	SpecVersion string `json:"specVersion"`
}

func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle) __premarshalJSON() (*__premarshalgetPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle, error) {
	var retval __premarshalgetPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle

	retval.Id = v.Id
	retval.Name = v.Name
	{

		dst := &retval.Spec
		src := v.Spec
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getPackageByNamingConventionGetPackageByNamingConventionPackageManifestBundle.Spec: %w", err)
		}
	}
	retval.SpecVersion = v.SpecVersion
	return &retval, nil
}

// getPackageByNamingConventionGetPackageByNamingConventionPackageRemoteReferencesRemoteReference includes the requested fields of the GraphQL type RemoteReference.
type getPackageByNamingConventionGetPackageByNamingConventionPackageRemoteReferencesRemoteReference struct {
	Artifact getPackageByNamingConventionGetPackageByNamingConventionPackageRemoteReferencesRemoteReferenceArtifact `json:"artifact"`
}

// GetArtifact returns getPackageByNamingConventionGetPackageByNamingConventionPackageRemoteReferencesRemoteReference.Artifact, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageRemoteReferencesRemoteReference) GetArtifact() getPackageByNamingConventionGetPackageByNamingConventionPackageRemoteReferencesRemoteReferenceArtifact {
	return v.Artifact
}

// getPackageByNamingConventionGetPackageByNamingConventionPackageRemoteReferencesRemoteReferenceArtifact includes the requested fields of the GraphQL type Artifact.
type getPackageByNamingConventionGetPackageByNamingConventionPackageRemoteReferencesRemoteReferenceArtifact struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	// The bundle's artifact field (output field) that produced this artifact.
	Field string `json:"field"`
}

// GetId returns getPackageByNamingConventionGetPackageByNamingConventionPackageRemoteReferencesRemoteReferenceArtifact.Id, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageRemoteReferencesRemoteReferenceArtifact) GetId() string {
	return v.Id
}

// GetName returns getPackageByNamingConventionGetPackageByNamingConventionPackageRemoteReferencesRemoteReferenceArtifact.Name, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageRemoteReferencesRemoteReferenceArtifact) GetName() string {
	return v.Name
}

// GetField returns getPackageByNamingConventionGetPackageByNamingConventionPackageRemoteReferencesRemoteReferenceArtifact.Field, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionGetPackageByNamingConventionPackageRemoteReferencesRemoteReferenceArtifact) GetField() string {
	return v.Field
}

// getPackageByNamingConventionResponse is returned by getPackageByNamingConvention on success.
type getPackageByNamingConventionResponse struct {
	// Finds a package by its naming convention, the name prefix (project-target-manifest) without the random unique suffix.
	GetPackageByNamingConvention getPackageByNamingConventionGetPackageByNamingConventionPackage `json:"getPackageByNamingConvention"`
}

// GetGetPackageByNamingConvention returns getPackageByNamingConventionResponse.GetPackageByNamingConvention, and is useful for accessing the field via an interface.
func (v *getPackageByNamingConventionResponse) GetGetPackageByNamingConvention() getPackageByNamingConventionGetPackageByNamingConventionPackage {
	return v.GetPackageByNamingConvention
}

// getProjectByIdProject includes the requested fields of the GraphQL type Project.
type getProjectByIdProject struct {
	Id            string         `json:"id"`
	Name          string         `json:"name"`
	DefaultParams map[string]any `json:"-"`
	Slug          string         `json:"slug"`
	Description   string         `json:"description"`
}

// GetId returns getProjectByIdProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectByIdProject) GetId() string { return v.Id }

// GetName returns getProjectByIdProject.Name, and is useful for accessing the field via an interface.
func (v *getProjectByIdProject) GetName() string { return v.Name }

// GetDefaultParams returns getProjectByIdProject.DefaultParams, and is useful for accessing the field via an interface.
func (v *getProjectByIdProject) GetDefaultParams() map[string]any { return v.DefaultParams }

// GetSlug returns getProjectByIdProject.Slug, and is useful for accessing the field via an interface.
func (v *getProjectByIdProject) GetSlug() string { return v.Slug }

// GetDescription returns getProjectByIdProject.Description, and is useful for accessing the field via an interface.
func (v *getProjectByIdProject) GetDescription() string { return v.Description }

func (v *getProjectByIdProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectByIdProject
		DefaultParams json.RawMessage `json:"defaultParams"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectByIdProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DefaultParams
		src := firstPass.DefaultParams
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getProjectByIdProject.DefaultParams: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetProjectByIdProject struct {
	Id string `json:"id"`

	Name string `json:"name"`

	DefaultParams json.RawMessage `json:"defaultParams"`

	Slug string `json:"slug"`

	Description string `json:"description"`
}

func (v *getProjectByIdProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectByIdProject) __premarshalJSON() (*__premarshalgetProjectByIdProject, error) {
	var retval __premarshalgetProjectByIdProject

	retval.Id = v.Id
	retval.Name = v.Name
	{

		dst := &retval.DefaultParams
		src := v.DefaultParams
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getProjectByIdProject.DefaultParams: %w", err)
		}
	}
	retval.Slug = v.Slug
	retval.Description = v.Description
	return &retval, nil
}

// getProjectByIdResponse is returned by getProjectById on success.
type getProjectByIdResponse struct {
	Project getProjectByIdProject `json:"project"`
}

// GetProject returns getProjectByIdResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectByIdResponse) GetProject() getProjectByIdProject { return v.Project }

// getProjectsProjectsProject includes the requested fields of the GraphQL type Project.
type getProjectsProjectsProject struct {
	Name          string                                              `json:"name"`
	Id            string                                              `json:"id"`
	Slug          string                                              `json:"slug"`
	Description   string                                              `json:"description"`
	DefaultParams map[string]any                                      `json:"-"`
	Environments  []getProjectsProjectsProjectEnvironmentsEnvironment `json:"environments"`
	// Cloud provider costs for this project
	Cost getProjectsProjectsProjectCost `json:"cost"`
}

// GetName returns getProjectsProjectsProject.Name, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProject) GetName() string { return v.Name }

// GetId returns getProjectsProjectsProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProject) GetId() string { return v.Id }

// GetSlug returns getProjectsProjectsProject.Slug, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProject) GetSlug() string { return v.Slug }

// GetDescription returns getProjectsProjectsProject.Description, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProject) GetDescription() string { return v.Description }

// GetDefaultParams returns getProjectsProjectsProject.DefaultParams, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProject) GetDefaultParams() map[string]any { return v.DefaultParams }

// GetEnvironments returns getProjectsProjectsProject.Environments, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProject) GetEnvironments() []getProjectsProjectsProjectEnvironmentsEnvironment {
	return v.Environments
}

// GetCost returns getProjectsProjectsProject.Cost, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProject) GetCost() getProjectsProjectsProjectCost { return v.Cost }

func (v *getProjectsProjectsProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsProjectsProject
		DefaultParams json.RawMessage `json:"defaultParams"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsProjectsProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DefaultParams
		src := firstPass.DefaultParams
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getProjectsProjectsProject.DefaultParams: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetProjectsProjectsProject struct {
	Name string `json:"name"`

	Id string `json:"id"`

	Slug string `json:"slug"`

	Description string `json:"description"`

	DefaultParams json.RawMessage `json:"defaultParams"`

	Environments []getProjectsProjectsProjectEnvironmentsEnvironment `json:"environments"`

	Cost getProjectsProjectsProjectCost `json:"cost"`
}

func (v *getProjectsProjectsProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsProjectsProject) __premarshalJSON() (*__premarshalgetProjectsProjectsProject, error) {
	var retval __premarshalgetProjectsProjectsProject

	retval.Name = v.Name
	retval.Id = v.Id
	retval.Slug = v.Slug
	retval.Description = v.Description
	{

		dst := &retval.DefaultParams
		src := v.DefaultParams
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getProjectsProjectsProject.DefaultParams: %w", err)
		}
	}
	retval.Environments = v.Environments
	retval.Cost = v.Cost
	return &retval, nil
}

// getProjectsProjectsProjectCost includes the requested fields of the GraphQL type Cost.
// The GraphQL type's documentation follows.
//
// Cost information for a resource
type getProjectsProjectsProjectCost struct {
	// Monthly cost summary
	Monthly getProjectsProjectsProjectCostMonthlySummary `json:"monthly"`
	// Daily cost summary
	Daily getProjectsProjectsProjectCostDailySummary `json:"daily"`
}

// GetMonthly returns getProjectsProjectsProjectCost.Monthly, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectCost) GetMonthly() getProjectsProjectsProjectCostMonthlySummary {
	return v.Monthly
}

// GetDaily returns getProjectsProjectsProjectCost.Daily, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectCost) GetDaily() getProjectsProjectsProjectCostDailySummary {
	return v.Daily
}

// getProjectsProjectsProjectCostDailySummary includes the requested fields of the GraphQL type Summary.
// The GraphQL type's documentation follows.
//
// Summary of costs over a time period
type getProjectsProjectsProjectCostDailySummary struct {
	// Average cost sample for the period
	Average getProjectsProjectsProjectCostDailySummaryAverageCostSample `json:"average"`
}

// GetAverage returns getProjectsProjectsProjectCostDailySummary.Average, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectCostDailySummary) GetAverage() getProjectsProjectsProjectCostDailySummaryAverageCostSample {
	return v.Average
}

// getProjectsProjectsProjectCostDailySummaryAverageCostSample includes the requested fields of the GraphQL type CostSample.
// The GraphQL type's documentation follows.
//
// A single cost measurement
type getProjectsProjectsProjectCostDailySummaryAverageCostSample struct {
	// The cost amount
	Amount float64 `json:"amount"`
}

// GetAmount returns getProjectsProjectsProjectCostDailySummaryAverageCostSample.Amount, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectCostDailySummaryAverageCostSample) GetAmount() float64 {
	return v.Amount
}

// getProjectsProjectsProjectCostMonthlySummary includes the requested fields of the GraphQL type Summary.
// The GraphQL type's documentation follows.
//
// Summary of costs over a time period
type getProjectsProjectsProjectCostMonthlySummary struct {
	// Average cost sample for the period
	Average getProjectsProjectsProjectCostMonthlySummaryAverageCostSample `json:"average"`
}

// GetAverage returns getProjectsProjectsProjectCostMonthlySummary.Average, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectCostMonthlySummary) GetAverage() getProjectsProjectsProjectCostMonthlySummaryAverageCostSample {
	return v.Average
}

// getProjectsProjectsProjectCostMonthlySummaryAverageCostSample includes the requested fields of the GraphQL type CostSample.
// The GraphQL type's documentation follows.
//
// A single cost measurement
type getProjectsProjectsProjectCostMonthlySummaryAverageCostSample struct {
	// The cost amount
	Amount float64 `json:"amount"`
}

// GetAmount returns getProjectsProjectsProjectCostMonthlySummaryAverageCostSample.Amount, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectCostMonthlySummaryAverageCostSample) GetAmount() float64 {
	return v.Amount
}

// getProjectsProjectsProjectEnvironmentsEnvironment includes the requested fields of the GraphQL type Environment.
type getProjectsProjectsProjectEnvironmentsEnvironment struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
}

// GetName returns getProjectsProjectsProjectEnvironmentsEnvironment.Name, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectEnvironmentsEnvironment) GetName() string { return v.Name }

// GetSlug returns getProjectsProjectsProjectEnvironmentsEnvironment.Slug, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectEnvironmentsEnvironment) GetSlug() string { return v.Slug }

// getProjectsResponse is returned by getProjects on success.
type getProjectsResponse struct {
	Projects []getProjectsProjectsProject `json:"projects"`
}

// GetProjects returns getProjectsResponse.Projects, and is useful for accessing the field via an interface.
func (v *getProjectsResponse) GetProjects() []getProjectsProjectsProject { return v.Projects }

// listArtifactDefinitionsArtifactDefinitionsArtifactDefinition includes the requested fields of the GraphQL type ArtifactDefinition.
// The GraphQL type's documentation follows.
//
// A standardized contract for passing state between infrastructure modules, enabling cross-tool connectivity (e.g. Terraform outputs to Helm values) and automatic resource configuration (e.g. IAM policies, secrets, credentials)
type listArtifactDefinitionsArtifactDefinitionsArtifactDefinition struct {
	Id     string         `json:"id"`
	Schema map[string]any `json:"-"`
	// The name of this type. Organization scoped: my-org/aws-iam-role
	Name      string                                                         `json:"name"`
	Icon      string                                                         `json:"icon"`
	Label     string                                                         `json:"label"`
	UpdatedAt time.Time                                                      `json:"updatedAt"`
	Url       string                                                         `json:"url"`
	Ui        listArtifactDefinitionsArtifactDefinitionsArtifactDefinitionUi `json:"ui"`
}

// GetId returns listArtifactDefinitionsArtifactDefinitionsArtifactDefinition.Id, and is useful for accessing the field via an interface.
func (v *listArtifactDefinitionsArtifactDefinitionsArtifactDefinition) GetId() string { return v.Id }

// GetSchema returns listArtifactDefinitionsArtifactDefinitionsArtifactDefinition.Schema, and is useful for accessing the field via an interface.
func (v *listArtifactDefinitionsArtifactDefinitionsArtifactDefinition) GetSchema() map[string]any {
	return v.Schema
}

// GetName returns listArtifactDefinitionsArtifactDefinitionsArtifactDefinition.Name, and is useful for accessing the field via an interface.
func (v *listArtifactDefinitionsArtifactDefinitionsArtifactDefinition) GetName() string {
	return v.Name
}

// GetIcon returns listArtifactDefinitionsArtifactDefinitionsArtifactDefinition.Icon, and is useful for accessing the field via an interface.
func (v *listArtifactDefinitionsArtifactDefinitionsArtifactDefinition) GetIcon() string {
	return v.Icon
}

// GetLabel returns listArtifactDefinitionsArtifactDefinitionsArtifactDefinition.Label, and is useful for accessing the field via an interface.
func (v *listArtifactDefinitionsArtifactDefinitionsArtifactDefinition) GetLabel() string {
	return v.Label
}

// GetUpdatedAt returns listArtifactDefinitionsArtifactDefinitionsArtifactDefinition.UpdatedAt, and is useful for accessing the field via an interface.
func (v *listArtifactDefinitionsArtifactDefinitionsArtifactDefinition) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetUrl returns listArtifactDefinitionsArtifactDefinitionsArtifactDefinition.Url, and is useful for accessing the field via an interface.
func (v *listArtifactDefinitionsArtifactDefinitionsArtifactDefinition) GetUrl() string { return v.Url }

// GetUi returns listArtifactDefinitionsArtifactDefinitionsArtifactDefinition.Ui, and is useful for accessing the field via an interface.
func (v *listArtifactDefinitionsArtifactDefinitionsArtifactDefinition) GetUi() listArtifactDefinitionsArtifactDefinitionsArtifactDefinitionUi {
	return v.Ui
}

func (v *listArtifactDefinitionsArtifactDefinitionsArtifactDefinition) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*listArtifactDefinitionsArtifactDefinitionsArtifactDefinition
		Schema json.RawMessage `json:"schema"`
		graphql.NoUnmarshalJSON
	}
	firstPass.listArtifactDefinitionsArtifactDefinitionsArtifactDefinition = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Schema
		src := firstPass.Schema
		if len(src) != 0 && string(src) != "null" {
			err = scalars.UnmarshalJSON(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal listArtifactDefinitionsArtifactDefinitionsArtifactDefinition.Schema: %w", err)
			}
		}
	}
	return nil
}

type __premarshallistArtifactDefinitionsArtifactDefinitionsArtifactDefinition struct {
	Id string `json:"id"`

	Schema json.RawMessage `json:"schema"`

	Name string `json:"name"`

	Icon string `json:"icon"`

	Label string `json:"label"`

	UpdatedAt time.Time `json:"updatedAt"`

	Url string `json:"url"`

	Ui listArtifactDefinitionsArtifactDefinitionsArtifactDefinitionUi `json:"ui"`
}

func (v *listArtifactDefinitionsArtifactDefinitionsArtifactDefinition) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *listArtifactDefinitionsArtifactDefinitionsArtifactDefinition) __premarshalJSON() (*__premarshallistArtifactDefinitionsArtifactDefinitionsArtifactDefinition, error) {
	var retval __premarshallistArtifactDefinitionsArtifactDefinitionsArtifactDefinition

	retval.Id = v.Id
	{

		dst := &retval.Schema
		src := v.Schema
		var err error
		*dst, err = scalars.MarshalJSON(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal listArtifactDefinitionsArtifactDefinitionsArtifactDefinition.Schema: %w", err)
		}
	}
	retval.Name = v.Name
	retval.Icon = v.Icon
	retval.Label = v.Label
	retval.UpdatedAt = v.UpdatedAt
	retval.Url = v.Url
	retval.Ui = v.Ui
	return &retval, nil
}

// listArtifactDefinitionsArtifactDefinitionsArtifactDefinitionUi includes the requested fields of the GraphQL type ArtifactDefinitionUi.
type listArtifactDefinitionsArtifactDefinitionsArtifactDefinitionUi struct {
	ConnectionOrientation   ArtifactDefinitionUiConnectionOrientation `json:"connectionOrientation"`
	EnvironmentDefaultGroup string                                    `json:"environmentDefaultGroup"`
}

// GetConnectionOrientation returns listArtifactDefinitionsArtifactDefinitionsArtifactDefinitionUi.ConnectionOrientation, and is useful for accessing the field via an interface.
func (v *listArtifactDefinitionsArtifactDefinitionsArtifactDefinitionUi) GetConnectionOrientation() ArtifactDefinitionUiConnectionOrientation {
	return v.ConnectionOrientation
}

// GetEnvironmentDefaultGroup returns listArtifactDefinitionsArtifactDefinitionsArtifactDefinitionUi.EnvironmentDefaultGroup, and is useful for accessing the field via an interface.
func (v *listArtifactDefinitionsArtifactDefinitionsArtifactDefinitionUi) GetEnvironmentDefaultGroup() string {
	return v.EnvironmentDefaultGroup
}

// listArtifactDefinitionsResponse is returned by listArtifactDefinitions on success.
type listArtifactDefinitionsResponse struct {
	ArtifactDefinitions []listArtifactDefinitionsArtifactDefinitionsArtifactDefinition `json:"artifactDefinitions"`
}

// GetArtifactDefinitions returns listArtifactDefinitionsResponse.ArtifactDefinitions, and is useful for accessing the field via an interface.
func (v *listArtifactDefinitionsResponse) GetArtifactDefinitions() []listArtifactDefinitionsArtifactDefinitionsArtifactDefinition {
	return v.ArtifactDefinitions
}

// publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayload includes the requested fields of the GraphQL type ArtifactDefinitionPayload.
type publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayload struct {
	// The object created/updated/deleted by the mutation. May be null if mutation failed.
	Result publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayloadResultArtifactDefinition `json:"result"`
	// Indicates if the mutation completed successfully or not.
	Successful bool `json:"successful"`
	// A list of failed validations. May be blank or null if mutation succeeded.
	Messages []MutationValidationError `json:"messages"`
}

// GetResult returns publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayload.Result, and is useful for accessing the field via an interface.
func (v *publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayload) GetResult() publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayloadResultArtifactDefinition {
	return v.Result
}

// GetSuccessful returns publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayload.Successful, and is useful for accessing the field via an interface.
func (v *publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayload) GetSuccessful() bool {
	return v.Successful
}

// GetMessages returns publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayload.Messages, and is useful for accessing the field via an interface.
func (v *publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayload) GetMessages() []MutationValidationError {
	return v.Messages
}

// publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayloadResultArtifactDefinition includes the requested fields of the GraphQL type ArtifactDefinition.
// The GraphQL type's documentation follows.
//
// A standardized contract for passing state between infrastructure modules, enabling cross-tool connectivity (e.g. Terraform outputs to Helm values) and automatic resource configuration (e.g. IAM policies, secrets, credentials)
type publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayloadResultArtifactDefinition struct {
	// The name of this type. Organization scoped: my-org/aws-iam-role
	Name string `json:"name"`
	Id   string `json:"id"`
}

// GetName returns publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayloadResultArtifactDefinition.Name, and is useful for accessing the field via an interface.
func (v *publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayloadResultArtifactDefinition) GetName() string {
	return v.Name
}

// GetId returns publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayloadResultArtifactDefinition.Id, and is useful for accessing the field via an interface.
func (v *publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayloadResultArtifactDefinition) GetId() string {
	return v.Id
}

// publishArtifactDefinitionResponse is returned by publishArtifactDefinition on success.
type publishArtifactDefinitionResponse struct {
	PublishArtifactDefinition publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayload `json:"publishArtifactDefinition"`
}

// GetPublishArtifactDefinition returns publishArtifactDefinitionResponse.PublishArtifactDefinition, and is useful for accessing the field via an interface.
func (v *publishArtifactDefinitionResponse) GetPublishArtifactDefinition() publishArtifactDefinitionPublishArtifactDefinitionArtifactDefinitionPayload {
	return v.PublishArtifactDefinition
}

// The query or mutation executed by configurePackage.
const configurePackage_Operation = `
mutation configurePackage ($organizationId: ID!, $targetId: ID!, $manifestId: ID!, $params: JSON!) {
	configurePackage(organizationId: $organizationId, targetId: $targetId, manifestId: $manifestId, params: $params) {
		result {
			id
			params
			namePrefix
		}
		successful
		messages {
			message
		}
	}
}
`

func configurePackage(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	targetId string,
	manifestId string,
	params map[string]any,
) (*configurePackageResponse, error) {
	req := &graphql.Request{
		OpName: "configurePackage",
		Query:  configurePackage_Operation,
		Variables: &__configurePackageInput{
			OrganizationId: organizationId,
			TargetId:       targetId,
			ManifestId:     manifestId,
			Params:         params,
		},
	}
	var err error

	var data configurePackageResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by containerRepository.
const containerRepository_Operation = `
query containerRepository ($orgId: ID!, $artifactId: ID!, $input: ContainerRepositoryInput!) {
	containerRepository(organizationId: $orgId, artifactId: $artifactId, input: $input) {
		token
		repoUri
	}
}
`

func containerRepository(
	ctx context.Context,
	client graphql.Client,
	orgId string,
	artifactId string,
	input ContainerRepositoryInput,
) (*containerRepositoryResponse, error) {
	req := &graphql.Request{
		OpName: "containerRepository",
		Query:  containerRepository_Operation,
		Variables: &__containerRepositoryInput{
			OrgId:      orgId,
			ArtifactId: artifactId,
			Input:      input,
		},
	}
	var err error

	var data containerRepositoryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createArtifact.
const createArtifact_Operation = `
mutation createArtifact ($organizationId: ID!, $artifactName: String!, $artifactSpecs: JSON!, $artifactType: String!, $artifactData: JSON!) {
	createArtifact(organizationId: $organizationId, name: $artifactName, specs: $artifactSpecs, type: $artifactType, data: $artifactData) {
		result {
			name
			id
		}
		successful
		messages {
			message
		}
	}
}
`

func createArtifact(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	artifactName string,
	artifactSpecs map[string]any,
	artifactType string,
	artifactData map[string]any,
) (*createArtifactResponse, error) {
	req := &graphql.Request{
		OpName: "createArtifact",
		Query:  createArtifact_Operation,
		Variables: &__createArtifactInput{
			OrganizationId: organizationId,
			ArtifactName:   artifactName,
			ArtifactSpecs:  artifactSpecs,
			ArtifactType:   artifactType,
			ArtifactData:   artifactData,
		},
	}
	var err error

	var data createArtifactResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by decommissionPreviewEnvironment.
const decommissionPreviewEnvironment_Operation = `
mutation decommissionPreviewEnvironment ($orgId: ID!, $targetId: ID!) {
	decommissionPreviewEnvironment(organizationId: $orgId, targetId: $targetId) {
		result {
			id
			slug
			project {
				id
				slug
			}
		}
		successful
		messages {
			message
		}
	}
}
`

func decommissionPreviewEnvironment(
	ctx context.Context,
	client graphql.Client,
	orgId string,
	targetId string,
) (*decommissionPreviewEnvironmentResponse, error) {
	req := &graphql.Request{
		OpName: "decommissionPreviewEnvironment",
		Query:  decommissionPreviewEnvironment_Operation,
		Variables: &__decommissionPreviewEnvironmentInput{
			OrgId:    orgId,
			TargetId: targetId,
		},
	}
	var err error

	var data decommissionPreviewEnvironmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deployPackage.
const deployPackage_Operation = `
mutation deployPackage ($organizationId: ID!, $targetId: ID!, $manifestId: ID!, $message: String!) {
	deployPackage(organizationId: $organizationId, manifestId: $manifestId, targetId: $targetId, message: $message) {
		successful
		result {
			id
		}
		messages {
			message
		}
	}
}
`

func deployPackage(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	targetId string,
	manifestId string,
	message string,
) (*deployPackageResponse, error) {
	req := &graphql.Request{
		OpName: "deployPackage",
		Query:  deployPackage_Operation,
		Variables: &__deployPackageInput{
			OrganizationId: organizationId,
			TargetId:       targetId,
			ManifestId:     manifestId,
			Message:        message,
		},
	}
	var err error

	var data deployPackageResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deployPreviewEnvironment.
const deployPreviewEnvironment_Operation = `
mutation deployPreviewEnvironment ($organizationId: ID!, $projectId: ID!, $input: PreviewEnvironmentInput!) {
	deployPreviewEnvironment(projectId: $projectId, organizationId: $organizationId, input: $input) {
		successful
		result {
			id
			slug
			project {
				id
				slug
			}
		}
		messages {
			message
		}
	}
}
`

func deployPreviewEnvironment(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	projectId string,
	input PreviewEnvironmentInput,
) (*deployPreviewEnvironmentResponse, error) {
	req := &graphql.Request{
		OpName: "deployPreviewEnvironment",
		Query:  deployPreviewEnvironment_Operation,
		Variables: &__deployPreviewEnvironmentInput{
			OrganizationId: organizationId,
			ProjectId:      projectId,
			Input:          input,
		},
	}
	var err error

	var data deployPreviewEnvironmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by downloadArtifact.
const downloadArtifact_Operation = `
query downloadArtifact ($organizationId: ID!, $artifactId: ID!, $format: DownloadFormat!) {
	downloadArtifact(organizationId: $organizationId, artifactId: $artifactId, format: $format) {
		renderedArtifact
	}
}
`

func downloadArtifact(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	artifactId string,
	format DownloadFormat,
) (*downloadArtifactResponse, error) {
	req := &graphql.Request{
		OpName: "downloadArtifact",
		Query:  downloadArtifact_Operation,
		Variables: &__downloadArtifactInput{
			OrganizationId: organizationId,
			ArtifactId:     artifactId,
			Format:         format,
		},
	}
	var err error

	var data downloadArtifactResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getArtifactDefinition.
const getArtifactDefinition_Operation = `
query getArtifactDefinition ($organizationId: ID!, $name: String!) {
	artifactDefinition(organizationId: $organizationId, name: $name) {
		id
		schema
		name
		icon
		label
		updatedAt
		url
		ui {
			connectionOrientation
			environmentDefaultGroup
		}
	}
}
`

func getArtifactDefinition(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	name string,
) (*getArtifactDefinitionResponse, error) {
	req := &graphql.Request{
		OpName: "getArtifactDefinition",
		Query:  getArtifactDefinition_Operation,
		Variables: &__getArtifactDefinitionInput{
			OrganizationId: organizationId,
			Name:           name,
		},
	}
	var err error

	var data getArtifactDefinitionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getArtifactsByType.
const getArtifactsByType_Operation = `
query getArtifactsByType ($organizationId: ID!, $artifactType: String!) {
	artifacts(organizationId: $organizationId, input: {filter:{type:$artifactType}}) {
		next
		items {
			id
			name
		}
	}
}
`

func getArtifactsByType(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	artifactType string,
) (*getArtifactsByTypeResponse, error) {
	req := &graphql.Request{
		OpName: "getArtifactsByType",
		Query:  getArtifactsByType_Operation,
		Variables: &__getArtifactsByTypeInput{
			OrganizationId: organizationId,
			ArtifactType:   artifactType,
		},
	}
	var err error

	var data getArtifactsByTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getDeploymentById.
const getDeploymentById_Operation = `
query getDeploymentById ($organizationId: ID!, $id: ID!) {
	deployment(organizationId: $organizationId, id: $id) {
		id
		status
	}
}
`

func getDeploymentById(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	id string,
) (*getDeploymentByIdResponse, error) {
	req := &graphql.Request{
		OpName: "getDeploymentById",
		Query:  getDeploymentById_Operation,
		Variables: &__getDeploymentByIdInput{
			OrganizationId: organizationId,
			Id:             id,
		},
	}
	var err error

	var data getDeploymentByIdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getEnvironmentById.
const getEnvironmentById_Operation = `
query getEnvironmentById ($organizationId: ID!, $id: ID!) {
	environment(id: $id, organizationId: $organizationId) {
		id
		name
		slug
		description
		cost {
			monthly {
				average {
					amount
				}
			}
			daily {
				average {
					amount
				}
			}
		}
		packages {
			id
			params
			artifacts {
				id
				name
				field
			}
			remoteReferences {
				artifact {
					id
					name
					field
				}
			}
			status
			manifest {
				id
				name
				slug
				suffix
				description
				bundle {
					id
					name
					spec
					specVersion
				}
			}
		}
		project {
			id
			slug
		}
	}
}
`

func getEnvironmentById(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	id string,
) (*getEnvironmentByIdResponse, error) {
	req := &graphql.Request{
		OpName: "getEnvironmentById",
		Query:  getEnvironmentById_Operation,
		Variables: &__getEnvironmentByIdInput{
			OrganizationId: organizationId,
			Id:             id,
		},
	}
	var err error

	var data getEnvironmentByIdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getEnvironmentsByProject.
const getEnvironmentsByProject_Operation = `
query getEnvironmentsByProject ($organizationId: ID!, $projectId: ID!) {
	project(id: $projectId, organizationId: $organizationId) {
		environments {
			id
			name
			slug
			description
			cost {
				monthly {
					average {
						amount
					}
				}
				daily {
					average {
						amount
					}
				}
			}
			packages {
				id
				namePrefix
				status
				params
				artifacts {
					id
					name
					field
				}
				remoteReferences {
					artifact {
						id
						name
						field
					}
				}
				manifest {
					id
					name
					slug
					suffix
					description
					bundle {
						id
						name
						spec
						specVersion
					}
				}
			}
			project {
				id
				slug
			}
		}
	}
}
`

func getEnvironmentsByProject(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	projectId string,
) (*getEnvironmentsByProjectResponse, error) {
	req := &graphql.Request{
		OpName: "getEnvironmentsByProject",
		Query:  getEnvironmentsByProject_Operation,
		Variables: &__getEnvironmentsByProjectInput{
			OrganizationId: organizationId,
			ProjectId:      projectId,
		},
	}
	var err error

	var data getEnvironmentsByProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getPackageByNamingConvention.
const getPackageByNamingConvention_Operation = `
query getPackageByNamingConvention ($organizationId: ID!, $name: String!) {
	getPackageByNamingConvention(organizationId: $organizationId, name: $name) {
		id
		namePrefix
		status
		params
		artifacts {
			id
			name
			field
		}
		remoteReferences {
			artifact {
				id
				name
				field
			}
		}
		manifest {
			id
			name
			slug
			suffix
			description
			bundle {
				id
				name
				spec
				specVersion
			}
		}
		environment {
			id
			slug
			project {
				id
				slug
			}
		}
	}
}
`

func getPackageByNamingConvention(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	name string,
) (*getPackageByNamingConventionResponse, error) {
	req := &graphql.Request{
		OpName: "getPackageByNamingConvention",
		Query:  getPackageByNamingConvention_Operation,
		Variables: &__getPackageByNamingConventionInput{
			OrganizationId: organizationId,
			Name:           name,
		},
	}
	var err error

	var data getPackageByNamingConventionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getProjectById.
const getProjectById_Operation = `
query getProjectById ($organizationId: ID!, $id: ID!) {
	project(organizationId: $organizationId, id: $id) {
		id
		name
		defaultParams
		slug
		description
	}
}
`

func getProjectById(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	id string,
) (*getProjectByIdResponse, error) {
	req := &graphql.Request{
		OpName: "getProjectById",
		Query:  getProjectById_Operation,
		Variables: &__getProjectByIdInput{
			OrganizationId: organizationId,
			Id:             id,
		},
	}
	var err error

	var data getProjectByIdResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getProjects.
const getProjects_Operation = `
query getProjects ($organizationId: ID!) {
	projects(organizationId: $organizationId) {
		name
		id
		slug
		description
		defaultParams
		environments {
			name
			slug
		}
		cost {
			monthly {
				average {
					amount
				}
			}
			daily {
				average {
					amount
				}
			}
		}
	}
}
`

func getProjects(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
) (*getProjectsResponse, error) {
	req := &graphql.Request{
		OpName: "getProjects",
		Query:  getProjects_Operation,
		Variables: &__getProjectsInput{
			OrganizationId: organizationId,
		},
	}
	var err error

	var data getProjectsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listArtifactDefinitions.
const listArtifactDefinitions_Operation = `
query listArtifactDefinitions ($organizationId: ID!) {
	artifactDefinitions(organizationId: $organizationId) {
		id
		schema
		name
		icon
		label
		updatedAt
		url
		ui {
			connectionOrientation
			environmentDefaultGroup
		}
	}
}
`

func listArtifactDefinitions(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
) (*listArtifactDefinitionsResponse, error) {
	req := &graphql.Request{
		OpName: "listArtifactDefinitions",
		Query:  listArtifactDefinitions_Operation,
		Variables: &__listArtifactDefinitionsInput{
			OrganizationId: organizationId,
		},
	}
	var err error

	var data listArtifactDefinitionsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by publishArtifactDefinition.
const publishArtifactDefinition_Operation = `
mutation publishArtifactDefinition ($organizationId: ID!, $schema: JSON!) {
	publishArtifactDefinition(organizationId: $organizationId, schema: $schema) {
		result {
			name
			id
		}
		successful
		messages {
			message
		}
	}
}
`

func publishArtifactDefinition(
	ctx context.Context,
	client graphql.Client,
	organizationId string,
	schema map[string]any,
) (*publishArtifactDefinitionResponse, error) {
	req := &graphql.Request{
		OpName: "publishArtifactDefinition",
		Query:  publishArtifactDefinition_Operation,
		Variables: &__publishArtifactDefinitionInput{
			OrganizationId: organizationId,
			Schema:         schema,
		},
	}
	var err error

	var data publishArtifactDefinitionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
