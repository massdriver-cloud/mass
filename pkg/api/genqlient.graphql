# ARTIFACTS

mutation createArtifact($organizationId: ID!, $artifactName: String!, $artifactSpecs: JSON!, $artifactType: String! $artifactData: JSON!) {
  createArtifact(
    organizationId: $organizationId,
    name: $artifactName,
    specs: $artifactSpecs,
    type: $artifactType,
    data: $artifactData
  ) {
    result {
      name
      id
    }
    successful
    # @genqlient(typename: "MutationValidationError")
    messages {
      message
    }
  }
}

query getArtifactsByType($organizationId: ID!, $artifactType: String!) {
  artifacts(organizationId: $organizationId, input: {filter: {type: $artifactType}}) {
    items {
      id
      name
    }
  }
}

query downloadArtifact($organizationId: ID!, $artifactId: ID!, $format: DownloadFormat!) {
  downloadArtifact(organizationId: $organizationId, artifactId: $artifactId, format: $format) {
    renderedArtifact
  }
}


# ARTIFACT-DEFINITIONS

query getArtifactDefinition($organizationId: ID!, $name: String!) {
  artifactDefinition(organizationId: $organizationId, name: $name) {
    id
    schema
    name
    icon
    label
    updatedAt
    url
    ui {
      connectionOrientation
      environmentDefaultGroup
    }
  }
}

query listArtifactDefinitions($organizationId: ID!) {
  artifactDefinitions(organizationId: $organizationId) {
    id
    schema
    name
    icon
    label
    updatedAt
    url
    ui {
      connectionOrientation
      environmentDefaultGroup
    }
  }
}

query listCredentialArtifactDefinitions($organizationId: ID!) {
  artifactDefinitions(organizationId: $organizationId, input: {filter: {isCredential: true}}) {
    name
  }
}

mutation publishArtifactDefinition($organizationId: ID!, $schema: JSON!) {
  publishArtifactDefinition(organizationId: $organizationId, schema: $schema) {
    result {
      name
      id
    }
    successful
    # @genqlient(typename: "MutationValidationError")
    messages {
      message
    }
  }
}


# CONTAINER REPOSITORIES

query containerRepository($orgId: ID!, $artifactId: ID!, $input: ContainerRepositoryInput!) {
  containerRepository(organizationId: $orgId, artifactId: $artifactId, input: $input) {
    token, repoUri
  }
}


# DEPLOYMENTS

query getDeploymentById($organizationId: ID!, $id: ID!) {
  deployment(organizationId: $organizationId, id: $id) {
    id
    status
  }
}


# ENVIRONMENTS

query getEnvironmentById($organizationId: ID!, $id: ID!) {
  environment(id: $id, organizationId: $organizationId) {
    id
    name
    slug
    description
    cost {
      monthly {
        average {
          amount
        }
      }
      daily {
        average {
          amount
        }
      }
    }
    packages {
      id
      params
      artifacts {
        id
        name
        field
      }
      remoteReferences {
        artifact {
          id
          name
          field
        }
      }
      bundle {
        id
        name
        spec
        specVersion
      }
      status
      manifest {
        id
        name
        slug
        suffix
        description
      }
    }
    project {
      id
      slug
    }
  }
}

query getEnvironmentsByProject($organizationId: ID!, $projectId: ID!) {
  project(id: $projectId, organizationId: $organizationId) {
    environments {
      id
      name
      slug
      description
      cost {
        monthly {
          average {
            amount
          }
        }
        daily {
          average {
            amount
          }
        }
      }
      packages {
        id
        namePrefix
        status
        params
        artifacts {
          id
          name
          field
        }
        remoteReferences {
          artifact {
            id
            name
            field
          }
        }
        bundle {
          id
          name
          spec
          specVersion
        }
        manifest {
          id
          name
          slug
          suffix
          description
        }
      }
      project {
        id
        slug
      }
    }
  }
}


# PACKAGES

mutation deployPackage($organizationId: ID!, $targetId: ID!, $manifestId: ID!, $message: String!) {
  deployPackage(organizationId: $organizationId, manifestId: $manifestId, targetId: $targetId, message: $message) {
    successful
    result {
      id
    }
    # @genqlient(typename: "MutationValidationError")
    messages {
      message
    }
  }
}

query getPackage($organizationId: ID!, $id: ID!) {
  package(organizationId: $organizationId, id: $id) {
    id
    namePrefix
    status
    params
    artifacts {
      id
      name
      field
    }
    remoteReferences {
      artifact {
        id
        name
        field
      }
    }
    bundle {
      id
      name
      spec
      specVersion
    }
    manifest {
      id
      name
      slug
      suffix
      description
    }
    environment {
      id
      slug
      project {
        id
        slug
      }
    }
  }
}

mutation configurePackage($organizationId: ID!, $id: ID!, $params: JSON!) {
  configurePackage(organizationId: $organizationId, id: $id, params: $params) {
    result {
      id
      params
      namePrefix
    }
    successful
    # @genqlient(typename: "MutationValidationError")
    messages {
      message
    }
  }
}


# PROJECTS

query getProjects($organizationId: ID!){
  projects(organizationId: $organizationId){
    name
    id
    slug
    description
    defaultParams
    environments{
      name
      slug
    }
    cost{
      monthly{
        average{
          amount
        }
      }
      daily{
        average{
          amount
        }
      }
    }
  }
}

query getProjectById($organizationId: ID!, $id: ID!) {
  project(organizationId: $organizationId, id: $id) {
    id, name, defaultParams, slug, description
  }
}


# PREVIEW ENVIRONMENTS

mutation decommissionPreviewEnvironment($orgId: ID!, $targetId: ID!) {
  decommissionPreviewEnvironment(organizationId: $orgId, targetId: $targetId) {
    result {
      id
      slug
      project{
        id
        slug
      }
    }
    successful
    # @genqlient(typename: "MutationValidationError")
    messages {
      message
    }
  }
}

mutation deployPreviewEnvironment($organizationId: ID!, $projectId: ID!, $input: PreviewEnvironmentInput!) {
  deployPreviewEnvironment(projectId: $projectId, organizationId: $organizationId, input: $input) {
    successful
    result {
      id
      slug
      project{
        id
        slug
      }
    }
    # @genqlient(typename: "MutationValidationError")
    messages {
      message
    }
  }
}


# SERVER

query getServer() {
  server {
    appUrl
    mode
    version
  }
}
